/*
Navicat MySQL Data Transfer

Source Server         : localhost
Source Server Version : 50525
Source Host           : localhost:3306
Source Database       : forum

Target Server Type    : MYSQL
Target Server Version : 50525
File Encoding         : 65001

Date: 2017-05-02 17:21:44
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for `article`
-- ----------------------------
DROP TABLE IF EXISTS `article`;
CREATE TABLE `article` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `title` varchar(30) NOT NULL COMMENT '标题',
  `content` text NOT NULL COMMENT '内容',
  `userid` int(11) NOT NULL COMMENT '作者id',
  `addtime` datetime NOT NULL COMMENT '添加时间',
  `classificationid` int(11) NOT NULL COMMENT '文章类别id',
  `pageviews` int(11) NOT NULL DEFAULT '0' COMMENT '浏览量',
  `reply` int(11) NOT NULL DEFAULT '0' COMMENT '回复量',
  `typeid` int(11) NOT NULL COMMENT '文章类型id',
  `likes` int(11) NOT NULL DEFAULT '0' COMMENT '点赞数',
  `collections` int(11) NOT NULL DEFAULT '0' COMMENT '收藏数',
  PRIMARY KEY (`id`),
  KEY `userid` (`userid`),
  KEY `classificationid` (`classificationid`),
  KEY `typeid` (`typeid`),
  CONSTRAINT `classificationid` FOREIGN KEY (`classificationid`) REFERENCES `classification` (`id`),
  CONSTRAINT `typeid` FOREIGN KEY (`typeid`) REFERENCES `type` (`id`),
  CONSTRAINT `userid` FOREIGN KEY (`userid`) REFERENCES `user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=26 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of article
-- ----------------------------
INSERT INTO `article` VALUES ('1', 'gulp+requireJS自动生成版本号解决缓存问题', '今天下午本该放假半天，但出于对工作的负责留下来完成遗留的工作，废话不多说开始正文。\r\n由于浏览器有缓存的原因，领导提出在文件引用后加?v=1234来解决缓存问题，但版本号发生改变时浏览器会加载新文件。\r\n如：ours_mod/storage.js?v=a8883bafdc\r\n在上篇文章中算是初级了解了一下gulp，关于它的一些操作这里就不多说啦。\r\n一、我是使用gulp-rev和gulp-rev-collector来实现的（这个实现我要的效果需要修改node_modules下的指定文件：上一篇中有提到）。\r\n二、我的gulpfile.js文件：\r\nvar gulp = require(\'gulp\'),\r\n        runSequence = require(\'run-sequence\'),\r\n        gulpif = require(\'gulp-if\'),\r\n        uglify = require(\'gulp-uglify\'),\r\n        csslint = require(\'gulp-csslint\'),\r\n        rev = require(\'gulp-rev\'),\r\n        minifyCss = require(\'gulp-minify-css\'),\r\n        changed = require(\'gulp-changed\'),\r\n        jshint = require(\'gulp-jshint\'),\r\n        stylish = require(\'jshint-stylish\'),\r\n        revCollector = require(\'gulp-rev-collector\'),\r\n        minifyHtml = require(\'gulp-minify-html\'),\r\n        autoprefixer = require(\'gulp-autoprefixer\'),\r\n        del = require(\'del\');\r\nvar cssSrc = \'staticcss/*.css\',\r\n        cssDest = \'build/static\',\r\n        jsSrc = \'static*.js\',\r\n        jsDest = \'build/static\',\r\n        imgSrc = \'staticimg/*\',\r\n        imgDest = \'build/static\',\r\n        cssRevSrc = \'style/revCss\',\r\n        jsRevSrc = \'js/revJs\',\r\n        condition = true;\r\n//Images 根据MD5获取版', '1', '2017-03-08 15:02:30', '1', '0', '0', '1', '0', '9');
INSERT INTO `article` VALUES ('2', '小笔记（后续更~~~）', '1：禁止选中文字\r\n     <div onselectstart=\"return false\">禁止选中文字</div>\r\n\r\n2：CSS控制  输入框   只能   大写\r\n    <input type=\"text\" style=\"text-transform:uppercase;\"/>', '2', '2017-03-08 15:06:29', '2', '0', '0', '1', '0', '11');
INSERT INTO `article` VALUES ('3', '五星评价——简直完美！！！', '<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>五星评价</title>\n    <style>\n        @font-face {\n            font-family: \'iconfont\';  /* project id 247957 */\n            src: url(\'//at.alicdn.com/t/font_wkv6intmx8cnxw29.eot\');\n            src: url(\'//at.alicdn.com/t/font_wkv6intmx8cnxw29.eot?#iefix\') format(\'embedded-opentype\'),\n            url(\'//at.alicdn.com/t/font_wkv6intmx8cnxw29.woff\') format(\'woff\'),\n            url(\'//at.alicdn.com/t/font_wkv6intmx8cnxw29.ttf\') format(\'truetype\'),\n            url(\'//at.alicdn.com/t/font_wkv6intmx8cnxw29.svg#iconfont\') format(\'svg\');\n        }\n        .iconfont {\n            font-family:\"iconfont\" !important;\n            font-size:16px;\n            font-style:normal;\n            -webkit-font-smoothing: antialiased;\n            -webkit-text-stroke-width: 0.2px;\n            -moz-osx-font-smoothing: grayscale;\n        }\n        body{\n            font-family: \"microsoft yahei\";\n        }\n        ul,li{\n            list-style: none;\n            padding:0;\n            margin:0;\n        }\n        a{\n            text-decoration: none;\n        }\n        .clearfix:after {\n            content: \".\";\n            display: block;\n            height: 0;\n            clear: both;\n            visibility: hidden;\n        }\n        .order-evaluation {\n            width: 827px;\n            border: 2px solid #E84E40;\n            background: #fff;\n            z-index: 200;\n            margin:50px auto;\n        }\n        .order-evaluation{\n            padding:22px;\n        }\n        .order-evaluation h4{\n            font-size:18px;\n            color:#333333;\n            padding-bottom:20px;\n            border-bottom:1px dashed #dbdbdb;\n        }\n        .order-evaluation p{\n            font-size:14px;\n            color:#999;\n            line-height:45px;\n            margin-bottom:0;\n        }\n        .order-evaluation .order-evaluation-text{\n            font-size:16px;\n            color:#333;\n            line-height:40px;\n            width:809px;\n            padding-left:15px;\n            background:#f3f3f3;\n            margin-bottom:25px;\n            margin-top:20px;\n        }\n        .order-evaluation-checkbox ul li{\n            width:142px;\n            height:43px;\n            border:1px solid #e8e8e8;\n            text-align: center;\n            background: #fff;\n            font-size:14px;\n            color:#333333;\n            line-height:43px;\n            margin-right:25px;\n            margin-bottom:25px;\n            float:left;\n            cursor: pointer;\n            overflow: hidden;\n            position:relative;\n        }\n        .order-evaluation-checkbox ul li.checked i{\n            display: block;\n        }\n        .order-evaluation-checkbox ul li.checked{\n            border:1px solid #e84c3d;\n        }\n        .order-evaluation .order-evaluation-textarea{\n            position:relative;\n            width: 784px;\n            height: 210px;\n        }\n        .order-evaluation .order-evaluation-textarea textarea{\n            width:793px;\n            height:178px;\n            border:1px solid #e8e8e8;\n            position:absolute;\n            top:0;\n            left:0;\n            line-height:22px;\n            padding:15px;\n            color:#666;\n        }\n        .order-evaluation .order-evaluation-textarea span{\n            position:absolute;\n            bottom:10px;\n            font-size:12px;\n            color:#999;\n            right:10px;\n        }\n        .order-evaluation .order-evaluation-textarea span em{\n            color:#e84c3d;\n        }\n        .order-evaluation>a{\n            width:154px;\n            height:48px;\n            border-radius: 6px;\n            display: block;\n            text-align: center;\n            line-height:48px;\n            background:#f36a5a;\n            float:right;\n            margin-top:20px;\n            color:#fff;\n            font-size:14px;\n        }\n        .order-evaluation-checkbox ul li i {\n            display: none;\n            color: #e84c3d;\n            position: absolute;\n            right: -4px;\n            bottom: -14px;\n            font-size: 20px;\n        }\n        .order-evaluation>a:hover{\n            background: #e84c3d;\n        }\n        .block li label,.con span{ font-size: 18px; margin-right: 20px; line-height: 23px;}\n        .block li span{display: inline-block; vertical-align: middle; cursor: pointer;}\n        .block li span img{margin-right: -5px; }\n        .level{color:#e84c3d;font-size:16px;margin-left:15px;position: relative;top: 3px;}\n        .dmlei_tishi_info{\n            height:70px;border-radius: 10px;background: rgba(0,0,0,0.5);font-size:18px;color:#fff;text-align: center;line-height: 70px;position:fixed;\n            left: 48%;\n            display: none;\n            margin-left: -128px;\n            top: 40%;\n            margin-top: -35px;\n            padding: 0 15px;\n            z-index: 1000;\n        }\n    </style>\n</head>\n<body>\n<div class=\"order-evaluation clearfix\">\n    <h4>给“新闻订单”的评价</h4>\n    <p>请严肃认真对待此次评价哦！您的评价对我们真的真的非常重要！</p>\n    <div class=\"block\">\n        <ul>\n            <li data-default-index=\"0\">\n                        <span>\n                            <img src=\"http://7xnlea.com2.z0.glb.qiniucdn.com/x1.png\">\n                            <img src=\"http://7xnlea.com2.z0.glb.qiniucdn.com/x1.png\">\n                            <img src=\"http://7xnlea.com2.z0.glb.qiniucdn.com/x1.png\">\n                            <img src=\"http://7xnlea.com2.z0.glb.qiniucdn.com/x1.png\">\n                            <img src=\"http://7xnlea.com2.z0.glb.qiniucdn.com/x1.png\">\n                        </span>\n                <em class=\"level\"></em>\n            </li>\n        </ul>\n    </div>\n    <div class=\"order-evaluation-text\">\n        本次交易，乖，摸摸头 给您留下了什么印象呢？\n    </div>\n    <div class=\"order-evaluation-checkbox\">\n        <ul class=\"clearfix\">\n            <li class=\"order-evaluation-check\" data-impression=\"1\">专业水平高<i class=\"iconfont icon-checked\"></i></li>\n            <li class=\"order-evaluation-check\" data-impression=\"2\">交付准时<i class=\"iconfont icon-checked\"></i></li>\n            <li class=\"order-evaluation-check\" data-impression=\"3\">效果明显<i class=\"iconfont icon-checked\"></i></li>\n            <li class=\"order-evaluation-check\" data-impression=\"4\">数据分析准确<i class=\"iconfont icon-checked\"></i></li>\n            <li class=\"order-evaluation-check\" data-impression=\"5\">能力待提高<i class=\"iconfont icon-checked\"></i></li>\n            <li class=\"order-evaluation-check\" data-impression=\"6\">工期延误<i class=\"iconfont icon-checked\"></i></li>\n        </ul>\n    </div>\n    <div class=\"order-evaluation-textarea\">\n        <textarea name=\"content\" id=\"TextArea1\" onkeyup=\"words_deal();\" ></textarea>\n        <span>还可以输入<em id=\"textCount\">140</em>个字</span>\n    </div>\n    <a href=\"javascript:;\" id=\"order_evaluation\">评价完成</a>\n</div>\n\n<div id=\"order_evaluate_modal\" class=\"dmlei_tishi_info\"></div>\n\n</body>\n<script src=\"//cdn.bootcss.com/jquery/3.1.1/jquery.min.js\"></script>\n<script>\n    /*\n     * 根据index获取 str\n     * **/\n    function byIndexLeve(index){\n        var str =\"\";\n        switch (index)\n        {\n            case 0:\n                str=\"差评\";\n                break;\n            case 1:\n                str=\"较差\";\n                break;\n            case 2:\n                str=\"中等\";\n                break;\n            case 3:\n                str=\"一般\";\n                break;\n            case 4:\n                str=\"好评\";\n                break;\n        }\n        return str;\n    }\n    //  星星数量\n    var stars = [\n        [\'x2.png\', \'x1.png\', \'x1.png\', \'x1.png\', \'x1.png\'],\n        [\'x2.png\', \'x2.png\', \'x1.png\', \'x1.png\', \'x1.png\'],\n        [\'x2.png\', \'x2.png\', \'x2.png\', \'x1.png\', \'x1.png\'],\n        [\'x2.png\', \'x2.png\', \'x2.png\', \'x2.png\', \'x1.png\'],\n        [\'x2.png\', \'x2.png\', \'x2.png\', \'x2.png\', \'x2.png\'],\n    ];\n    $(\".block li\").find(\"img\").hover(function(e) {\n        var obj = $(this);\n        var index = obj.index();\n        if(index < (parseInt($(\".block li\").attr(\"data-default-index\")) -1)){\n            return ;\n        }\n        var li = obj.closest(\"li\");\n        var star_area_index = li.index();\n        for (var i = 0; i < 5; i++) {\n            li.find(\"img\").eq(i).attr(\"src\", \"http://7xnlea.com2.z0.glb.qiniucdn.com/\" + stars[index][i]);//切换每个星星\n        }\n        $(\".level\").html(byIndexLeve(index));\n    }, function() {\n    })\n\n    $(\".block li\").hover(function(e) {\n    }, function() {\n        var index = $(this).attr(\"data-default-index\");//点击后的索引\n        index = parseInt(index);\n        console.log(\"index\",index);\n        $(\".level\").html(byIndexLeve(index-1));\n        console.log(byIndexLeve(index-1));\n        $(\".order-evaluation ul li:eq(0)\").find(\"img\").attr(\"src\",\"http://7xnlea.com2.z0.glb.qiniucdn.com/x1.png\");\n        for (var i=0;i<index;i++){\n\n            $(\".order-evaluation ul li:eq(0)\").find(\"img\").eq(i).attr(\"src\",\"http://7xnlea.com2.z0.glb.qiniucdn.com/x2.png\");\n        }\n    })\n    $(\".block li\").find(\"img\").click(function() {\n        var obj = $(this);\n        var li = obj.closest(\"li\");\n        var star_area_index = li.index();\n        var index1 = obj.index();\n        li.attr(\"data-default-index\", (parseInt(index1)+1));\n        var index = $(\".block li\").attr(\"data-default-index\");//点击后的索引\n        index = parseInt(index);\n        console.log(\"index\",index);\n        $(\".level\").html(byIndexLeve(index-1));\n        console.log(byIndexLeve(index-1));\n        $(\".order-evaluation ul li:eq(0)\").find(\"img\").attr(\"src\",\"http://7xnlea.com2.z0.glb.qiniucdn.com/x1.png\");\n        for (var i=0;i<index;i++){\n            $(\".order-evaluation ul li:eq(0)\").find(\"img\").eq(i).attr(\"src\",\"http://7xnlea.com2.z0.glb.qiniucdn.com/x2.png\");\n        }\n\n    });\n    //印象\n    $(\".order-evaluation-check\").click(function(){\n        if($(this).hasClass(\'checked\')){\n            //当前为选中状态，需要取消\n            $(this).removeClass(\'checked\');\n        }else{\n            //当前未选中，需要增加选中\n            $(this).addClass(\'checked\');\n        }\n    });\n    //评价字数限制\n    function words_deal()\n    {\n        var curLength=$(\"#TextArea1\").val().length;\n        if(curLength>140)\n        {\n            var num=$(\"#TextArea1\").val().substr(0,140);\n            $(\"#TextArea1\").val(num);\n            alert(\"超过字数限制，多出的字将被截断！\" );\n        }\n        else\n        {\n            $(\"#textCount\").text(140-$(\"#TextArea1\").val().length);\n        }\n    }\n    $(\"#order_evaluation\").click(function(){\n        $(\"#order_evaluate_modal\").html(\"感谢您的评价！么么哒(* ￣3)(ε￣ *)\").show().delay(3000).hide(500);\n    })\n\n</script>\n</html>', '3', '2017-03-08 15:07:22', '3', '0', '0', '1', '0', '13');
INSERT INTO `article` VALUES ('4', 'Jq实现折叠框的效果', '这是一个简单的折叠框效果实现，核心内容jQ库里的slideToggle()方法\r\n\r\ncss代码：\r\n\r\n                        .con_ul{\r\n                                \r\n                                padding: 0;\r\n                                margin: 0;\r\n                                overflow: auto;\r\n                        }\r\n                        \r\n                        .con_ul li{\r\n                                \r\n                                list-style: none;\r\n                                padding: 10px;\r\n                                margin: 0;\r\n                                border-bottom: 1px solid #CCCCCC;\r\n                                \r\n                                \r\n                        }\r\n                        \r\n                        \r\n                        .con_ul li .title{\r\n                                \r\n                                padding-right: 20px;\r\n                                background-image: url(images/drop_1fcaf417.png);//默认的背景\r\n                                background-position: 100% 0px;\r\n                                background-repeat: no-repeat;\r\n                                \r\n                        }\r\n                        \r\n                        .con_ul li .title.act{\r\n                                \r\n                                padding-right: 20px;\r\n                                background-image: url(images/top.png);//展开后的背景\r\n                                background-position: 100% 0px;\r\n                                background-repeat: no-repeat;\r\n                                \r\n                        }\r\n                        \r\n                        .con{\r\n                                \r\n                                background-color: #F4F4F4;\r\n                                display: none;//内容本分默认隐藏\r\n                                padding: 5px;\r\n                                margin: 10px 0;\r\n                        }\r\n\r\nhtml代码：使用ul li的布局本菜认为代码结构更简洁清晰\r\n\r\n                <ul class=\"con_ul\">\r\n                        <li>\r\n                                <div class=\"title\">\r\n                                        标题\r\n                                </div>\r\n                                <div class=\"con\">\r\n                                        内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容\r\n                                </div>                                \r\n                        </li>\r\n                        <li>\r\n                                <div class=\"title\">\r\n                                        标题\r\n                                </div>\r\n                                <div class=\"con\">\r\n                                        内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容\r\n                                </div>                                \r\n                        </li>\r\n                        <li>\r\n                                <div class=\"title\">\r\n                                        标题\r\n                                </div>\r\n                                <div class=\"con\">\r\n                                        内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容内容\r\n                                </div>                                \r\n                        </li>\r\n                </ul>\r\n\r\njavascript代码：\r\n\r\n                <script type=\"text/javascript\" src=\"js/jquery-1.10.1.min.js\"></script>\r\n                \r\n                <script>\r\n                        \r\n                        $(\'.con_ul li .title\').click(function(){                                                                \r\n                                $(this).toggleClass(\'act\');//获取当前点击对象，切换act类，达到切换背景箭头的效果\r\n                                $(this).next().slideToggle();/获取当前点击对象的下一个兄弟级，实现折叠效果切换                                \r\n                        })\r\n                        \r\n                </script>', '1', '2017-03-08 15:08:22', '4', '0', '0', '1', '1', '7');
INSERT INTO `article` VALUES ('5', '前端最全的 API 集锦', '<font size=\"5\">一、节点</font><br>\r\n1.1 节点属性<br> <br>\r\nNode.nodeName&nbsp; &nbsp;//返回节点名称，只读<br>\r\nNode.nodeType&nbsp; &nbsp;//返回节点类型的常数值，只读<br>\r\nNode.nodeValue&nbsp;&nbsp;//返回Text或Comment节点的文本值，只读<br>\r\nNode.textContent&nbsp;&nbsp;//返回当前节点和它的所有后代节点的文本内容，可读写<br>\r\nNode.baseURI&nbsp; &nbsp; //返回当前网页的绝对路径<br> <br>\r\nNode.ownerDocument&nbsp;&nbsp;//返回当前节点所在的顶层文档对象，即document<br>\r\nNode.nextSibling&nbsp;&nbsp;//返回紧跟在当前节点后面的第一个兄弟节点<br>\r\nNode.previousSibling&nbsp;&nbsp;//返回当前节点前面的、距离最近的一个兄弟节点<br>\r\nNode.parentNode&nbsp; &nbsp;//返回当前节点的父节点<br>\r\nNode.parentElement&nbsp;&nbsp;//返回当前节点的父Element节点<br>\r\nNode.childNodes&nbsp; &nbsp;//返回当前节点的所有子节点<br>\r\nNode.firstChild&nbsp;&nbsp;//返回当前节点的第一个子节点<br>\r\nNode.lastChild&nbsp; &nbsp;//返回当前节点的最后一个子节点<br> <br>\r\n//parentNode接口<br>\r\nNode.children&nbsp;&nbsp;//返回指定节点的所有Element子节点<br>\r\nNode.firstElementChild&nbsp;&nbsp;//返回当前节点的第一个Element子节点<br>\r\nNode.lastElementChild&nbsp; &nbsp;//返回当前节点的最后一个Element子节点<br>\r\nNode.childElementCount&nbsp;&nbsp;//返回当前节点所有Element子节点的数目。<br>\r\n-------------------------------------------------------------------------------------------\r\r\n---------------<br> <br>\r\n1.2 操作<br> <br>\r\nNode.appendChild(node)&nbsp; &nbsp;//向节点添加最后一个子节点<br>\r\nNode.hasChildNodes()&nbsp; &nbsp;//返回布尔值，表示当前节点是否有子节点<br>\r\nNode.cloneNode(true);&nbsp;&nbsp;// 默认为false(克隆节点), true(克隆节点及其属性，以及后\r\r\n代)<br>\r\nNode.insertBefore(newNode,oldNode)&nbsp;&nbsp;// 在指定子节点之前插入新的子节点<br>\r\nNode.removeChild(node)&nbsp; &nbsp;//删除节点，在要删除节点的父节点上操作<br>\r\nNode.replaceChild(newChild,oldChild)&nbsp;&nbsp;//替换节点<br>\r\nNode.contains(node)&nbsp;&nbsp;//返回一个布尔值，表示参数节点是否为当前节点的后代节点。<br>\r\nNode.compareDocumentPosition(node)&nbsp; &nbsp;//返回一个7个比特位的二进制值，表示参数节点\r\r\n和当前节点的关系<br>\r\nNode.isEqualNode(noe)&nbsp;&nbsp;//返回布尔值，用于检查两个节点是否相等。所谓相等的节点，指\r\r\n的是两个节点的类型相同、属性相同、子节点相同。<br>\r\nNode.normalize()&nbsp; &nbsp;//用于清理当前节点内部的所有Text节点。它会去除空的文本节点，并\r\r\n且将毗邻的文本节点合并成一个。<br> <br>\r\n//ChildNode接口<br>\r\nNode.remove()&nbsp;&nbsp;//用于删除当前节点<br>\r\nNode.before()&nbsp;&nbsp;//<br>\r\nNode.after()<br>\r\nNode.replaceWith()<br>\r\n-------------------------------------------------------------------------------------------\r\r\n---------------<br> <br> <br>\r\n1.3 Document节点<br> <br>\r\n1.3.1 Document节点的属性<br> <br>\r\ndocument.doctype&nbsp; &nbsp;//<br>\r\ndocument.documentElement&nbsp;&nbsp;//返回当前文档的根节点<br>\r\ndocument.defaultView&nbsp; &nbsp;//返回document对象所在的window对象<br>\r\ndocument.body&nbsp; &nbsp;//返回当前文档的&lt;body&gt;节点<br>\r\ndocument.head&nbsp; &nbsp;//返回当前文档的&lt;head&gt;节点<br>\r\ndocument.activeElement&nbsp;&nbsp;//返回当前文档中获得焦点的那个元素。<br> <br>\r\n//节点集合属性<br>\r\ndocument.links&nbsp;&nbsp;//返回当前文档的所有a元素<br>\r\ndocument.forms&nbsp;&nbsp;//返回页面中所有表单元素<br>\r\ndocument.images&nbsp;&nbsp;//返回页面中所有图片元素<br>\r\ndocument.embeds&nbsp;&nbsp;//返回网页中所有嵌入对象<br>\r\ndocument.scripts&nbsp;&nbsp;//返回当前文档的所有脚本<br>\r\ndocument.styleSheets&nbsp;&nbsp;//返回当前网页的所有样式表<br> <br>\r\n//文档信息属性<br>\r\ndocument.documentURI&nbsp;&nbsp;//表示当前文档的网址<br>\r\ndocument.URL&nbsp;&nbsp;//返回当前文档的网址<br>\r\ndocument.domain&nbsp;&nbsp;//返回当前文档的域名<br>\r\ndocument.lastModified&nbsp;&nbsp;//返回当前文档最后修改的时间戳<br>\r\ndocument.location&nbsp;&nbsp;//返回location对象，提供当前文档的URL信息<br>\r\ndocument.referrer&nbsp;&nbsp;//返回当前文档的访问来源<br>\r\ndocument.title&nbsp; &nbsp; //返回当前文档的标题<br>\r\ndocument.characterSet属性返回渲染当前文档的字符集，比如UTF-8、ISO-8859-1。<br>\r\ndocument.readyState&nbsp;&nbsp;//返回当前文档的状态<br>\r\ndocument.designMode&nbsp;&nbsp;//控制当前文档是否可编辑，可读写<br>\r\ndocument.compatMode&nbsp;&nbsp;//返回浏览器处理文档的模式<br>\r\ndocument.cookie&nbsp; &nbsp;//用来操作Cookie<br> <br> <br>\r\n1.3.2 Document节点的方法<br> <br>\r\n（1）读写方法<br> <br>\r\ndocument.open()&nbsp; &nbsp;//用于新建并打开一个文档<br>\r\ndocument.close()&nbsp; &nbsp;//不安比open方法所新建的文档<br>\r\ndocument.write()&nbsp; &nbsp;//用于向当前文档写入内容<br>\r\ndocument.writeIn()&nbsp;&nbsp;//用于向当前文档写入内容，尾部添加换行符。<br>\r\n（2）查找节点<br> <br>\r\ndocument.querySelector(selectors)&nbsp; &nbsp;//接受一个CSS选择器作为参数，返回第一个匹配该\r\r\n选择器的元素节点。<br>\r\ndocument.querySelectorAll(selectors)&nbsp;&nbsp;//接受一个CSS选择器作为参数，返回所有匹配该\r\r\n选择器的元素节点。<br>\r\ndocument.getElementsByTagName(tagName)&nbsp;&nbsp;//返回所有指定HTML标签的元素<br>\r\ndocument.getElementsByClassName(className)&nbsp; &nbsp;//返回包括了所有class名字符合指定条\r\r\n件的元素<br>\r\ndocument.getElementsByName(name)&nbsp; &nbsp;//用于选择拥有name属性的HTML元素（比如\r\r\n&lt;form&gt;、&lt;radio&gt;、&lt;img&gt;、&lt;frame&gt;、&lt;embed&gt;和&lt;object&gt;等）\r\r\n<br>\r\ndocument.getElementById(id)&nbsp; &nbsp;//返回匹配指定id属性的元素节点。<br>\r\ndocument.elementFromPoint(x,y)&nbsp;&nbsp;//返回位于页面指定位置最上层的Element子节点。<br>\r\n（3）生成节点<br> <br>\r\ndocument.createElement(tagName)&nbsp; &nbsp;//用来生成HTML元素节点。<br>\r\ndocument.createTextNode(text)&nbsp; &nbsp;//用来生成文本节点<br>\r\ndocument.createAttribute(name)&nbsp;&nbsp;//生成一个新的属性对象节点，并返回它。<br>\r\ndocument.createDocumentFragment()&nbsp;&nbsp;//生成一个DocumentFragment对象<br>\r\n（4）事件方法<br> <br>\r\ndocument.createEvent(type)&nbsp; &nbsp;//生成一个事件对象，该对象能被element.dispatchEvent\r\r\n()方法使用<br>\r\ndocument.addEventListener(type,listener,capture)&nbsp;&nbsp;//注册事件<br>\r\ndocument.removeEventListener(type,listener,capture)&nbsp;&nbsp;//注销事件<br>\r\ndocument.dispatchEvent(event)&nbsp;&nbsp;//触发事件<br>\r\n（5）其他<br> <br>\r\ndocument.hasFocus()&nbsp; &nbsp;//返回一个布尔值，表示当前文档之中是否有元素被激活或获得焦\r\r\n点。<br>\r\ndocument.adoptNode(externalNode)&nbsp;&nbsp;//将某个节点，从其原来所在的文档移除，插入当前\r\r\n文档，并返回插入后的新节点。<br>\r\ndocument.importNode(externalNode, deep)&nbsp; &nbsp;//从外部文档拷贝指定节点，插入当前文档\r\r\n。<br>\r\n-------------------------------------------------------------------------------------------\r\r\n---------------<br> <br> <br>\r\n1.4 Element节点<br> <br>\r\n1.4.1 Element节点的属性<br> <br>\r\n（1）特性属性<br> <br>\r\nElement.attributes&nbsp;&nbsp;//返回当前元素节点的所有属性节点<br>\r\nElement.id&nbsp;&nbsp;//返回指定元素的id属性，可读写<br>\r\nElement.tagName&nbsp;&nbsp;//返回指定元素的大写标签名<br>\r\nElement.innerHTML&nbsp; &nbsp;//返回该元素包含的HTML代码，可读写<br>\r\nElement.outerHTML&nbsp;&nbsp;//返回指定元素节点的所有HTML代码，包括它自身和包含的的所有子元\r\r\n素，可读写<br>\r\nElement.className&nbsp;&nbsp;//返回当前元素的class属性，可读写<br>\r\nElement.classList&nbsp;&nbsp;//返回当前元素节点的所有class集合<br>\r\nElement.dataset&nbsp; &nbsp;//返回元素节点中所有的data-*属性。<br>\r\n（2）尺寸属性<br> <br>\r\nElement.clientHeight&nbsp; &nbsp;//返回元素节点可见部分的高度<br>\r\nElement.clientWidth&nbsp; &nbsp;//返回元素节点可见部分的宽度<br>\r\nElement.clientLeft&nbsp; &nbsp;//返回元素节点左边框的宽度<br>\r\nElement.clientTop&nbsp; &nbsp;//返回元素节点顶部边框的宽度<br>\r\nElement.scrollHeight&nbsp;&nbsp;//返回元素节点的总高度<br>\r\nElement.scrollWidth&nbsp;&nbsp;//返回元素节点的总宽度<br>\r\nElement.scrollLeft&nbsp; &nbsp;//返回元素节点的水平滚动条向右滚动的像素数值,通过设置这个属\r\r\n性可以改变元素的滚动位置<br>\r\nElement.scrollTop&nbsp; &nbsp;//返回元素节点的垂直滚动向下滚动的像素数值<br>\r\nElement.offsetHeight&nbsp; &nbsp;//返回元素的垂直高度(包含border,padding)<br>\r\nElement.offsetWidth&nbsp; &nbsp; //返回元素的水平宽度(包含border,padding)<br>\r\nElement.offsetLeft&nbsp; &nbsp; //返回当前元素左上角相对于Element.offsetParent节点的垂直偏\r\r\n移<br>\r\nElement.offsetTop&nbsp; &nbsp;//返回水平位移<br>\r\nElement.style&nbsp;&nbsp;//返回元素节点的行内样式<br>\r\n（3）节点相关属性<br> <br>\r\nElement.children&nbsp; &nbsp;//包括当前元素节点的所有子元素<br>\r\nElement.childElementCount&nbsp; &nbsp;//返回当前元素节点包含的子HTML元素节点的个数<br>\r\nElement.firstElementChild&nbsp;&nbsp;//返回当前节点的第一个Element子节点&nbsp;&nbsp;<br>\r\nElement.lastElementChild&nbsp; &nbsp;//返回当前节点的最后一个Element子节点&nbsp;&nbsp;<br>\r\nElement.nextElementSibling&nbsp;&nbsp;//返回当前元素节点的下一个兄弟HTML元素节点<br>\r\nElement.previousElementSibling&nbsp;&nbsp;//返回当前元素节点的前一个兄弟HTML节点<br>\r\nElement.offsetParent&nbsp; &nbsp;//返回当前元素节点的最靠近的、并且CSS的position属性不等于\r\r\nstatic的父元素。<br>\r\n1.4.2 Element节点的方法<br> <br>\r\n（1）位置方法<br> <br>\r\ngetBoundingClientRect()&nbsp;&nbsp;<br>\r\n// getBoundingClientRect返回一个对象，包含top,left,right,bottom,width,height // width、\r\r\nheight 元素自身宽高<br>\r\n// top 元素上外边界距窗口最上面的距离<br>\r\n// right 元素右外边界距窗口最上面的距离<br>\r\n// bottom 元素下外边界距窗口最上面的距离<br>\r\n// left 元素左外边界距窗口最上面的距离<br>\r\n// width 元素自身宽(包含border,padding) <br>\r\n// height 元素自身高(包含border,padding) <br> <br>\r\ngetClientRects()&nbsp; &nbsp;//返回当前元素在页面上形参的所有矩形。<br> <br>\r\n// 元素在页面上的偏移量&nbsp;&nbsp;<br>\r\nvar rect = el.getBoundingClientRect()&nbsp;&nbsp;<br>\r\nreturn {&nbsp; &nbsp;<br>\r\n&nbsp;&nbsp;top: rect.top + document.body.scrollTop,&nbsp; &nbsp;<br>\r\n&nbsp;&nbsp;left: rect.left + document.body.scrollLeft&nbsp;&nbsp;<br>\r\n}<br>\r\n（2）属性方法<br> <br>\r\nElement.getAttribute()：读取指定属性&nbsp;&nbsp;<br>\r\nElement.setAttribute()：设置指定属性&nbsp;&nbsp;<br>\r\nElement.hasAttribute()：返回一个布尔值，表示当前元素节点是否有指定的属性&nbsp;&nbsp;<br>\r\nElement.removeAttribute()：移除指定属性<br>\r\n（3）查找方法<br> <br>\r\nElement.querySelector()&nbsp;&nbsp;<br>\r\nElement.querySelectorAll()&nbsp;&nbsp;<br>\r\nElement.getElementsByTagName()&nbsp;&nbsp;<br>\r\nElement.getElementsByClassName()<br>\r\n（4）事件方法<br> <br>\r\nElement.addEventListener()：添加事件的回调函数&nbsp;&nbsp;<br>\r\nElement.removeEventListener()：移除事件监听函数&nbsp;&nbsp;<br>\r\nElement.dispatchEvent()：触发事件<br> <br>\r\n//ie8<br>\r\nElement.attachEvent(oneventName,listener)<br>\r\nElement.detachEvent(oneventName,listener)<br> <br>\r\n// event对象&nbsp;&nbsp;<br>\r\nvar event = window.event||event;&nbsp; &nbsp; <br> <br>\r\n// 事件的目标节点&nbsp;&nbsp;<br>\r\nvar target = event.target || event.srcElement;<br> <br>\r\n// 事件代理&nbsp;&nbsp;<br>\r\nul.addEventListener(\'click\', function(event) {&nbsp; &nbsp;<br>\r\n&nbsp;&nbsp;if (event.target.tagName.toLowerCase() === \'li\') {&nbsp; &nbsp;<br>\r\n&nbsp; &nbsp; console.log(event.target.innerHTML)&nbsp; &nbsp;<br>\r\n&nbsp;&nbsp;}&nbsp;&nbsp;<br>\r\n});<br>\r\n（5）其他<br> <br>\r\nElement.scrollIntoView()&nbsp; &nbsp;//滚动当前元素，进入浏览器的可见区域<br> <br>\r\n//解析HTML字符串，然后将生成的节点插入DOM树的指定位置。<br>\r\nElement.insertAdjacentHTML(where, htmlString); <br>\r\nElement.insertAdjacentHTML(\'beforeBegin\', htmlString); // 在该元素前插入&nbsp;&nbsp;<br>\r\nElement.insertAdjacentHTML(\'afterBegin\', htmlString); // 在该元素第一个子元素前插入 <br>\r\nElement.insertAdjacentHTML(\'beforeEnd\', htmlString); // 在该元素最后一个子元素后面插入 <br>\r\nElement.insertAdjacentHTML(\'afterEnd\', htmlString); // 在该元素后插入<br> <br>\r\nElement.remove()&nbsp;&nbsp;//用于将当前元素节点从DOM中移除<br>\r\nElement.focus()&nbsp; &nbsp;//用于将当前页面的焦点，转移到指定元素上<br> <br> <font \r\r\nsize=\"6\">二、CSS操作</font><br> <br> <br>\r\n（1）类名操作<br> <br>\r\n//ie8以下<br>\r\nElement.className&nbsp;&nbsp;//获取元素节点的类名<br>\r\nElement.className += \' \' + newClassName&nbsp;&nbsp;//新增一个类名<br> <br>\r\n//判断是否有某个类名<br>\r\nfunction hasClass(element,className){<br>\r\n&nbsp;&nbsp;return new RegExp(className,\'gi\').test(element.className);<br>\r\n}<br> <br>\r\n//移除class<br>\r\nfunction removeClass(element,className){<br>\r\n&nbsp;&nbsp;element.className = element.className.replace(new RegExp(\'(^|\\\\b)\' + \r\r\nclassName.split(\' \').join(\'|\') + \'(\\\\b|$)\', \'gi\'),\'\');<br>\r\n}<br> <br>\r\n//ie10 <br>\r\nelement.classList.add(className)&nbsp;&nbsp;//新增<br>\r\nelement.classList.remove(className)&nbsp;&nbsp;//删除<br>\r\nelement.classList.contains(className)&nbsp;&nbsp;//是否包含<br>\r\nelement.classList.toggle(className)&nbsp;&nbsp;//toggle class<br> <br>\r\n-------------------------------------------------------------------------------------------\r\r\n---------------<br> <br> <br>\r\n（2）style操作<br> <br>\r\nelement.setAttribute(\'style\',\'\')<br> <br>\r\nelement.style.backgroundColor = \'red\'<br> <br>\r\nelement.style.cssText //用来读写或删除整个style属性<br> <br>\r\nelement.style.setProperty(propertyName,value)&nbsp;&nbsp;//设置css属性<br>\r\nelement.style.getPropertyValue(property)&nbsp;&nbsp;//获取css属性<br>\r\nelement.style.removeProperty(property)&nbsp;&nbsp;//删除css属性<br>\r\n操作非内联样式<br>\r\n//ie8<br>\r\nelement.currentStyle[attrName]//ie9+<br>\r\nwindow.getComputedStyle(el,null)[attrName] <br>\r\nwindow.getComputedStyle(el,null).getPropertyValue(attrName)<br>\r\n//伪类<br>\r\nwindow.getComputedStyle(el,\':after\')[attrName]<br>\r\n-------------------------------------------------------------------------------------------\r\r\n---------------<br> <font size=\"6\">三、对象</font><br> <br>\r\n3.1 Object对象<br> <br>\r\n（1）生成实例对象<br> <br>\r\nvar o = new Object()<br>\r\n（2）属性<br> <br>\r\nObject.prototype&nbsp; &nbsp;//返回原型对象<br>\r\n（3）方法<br> <br>\r\nObject.keys(o)&nbsp; &nbsp;//遍历对象的可枚举属性<br>\r\nObject.getOwnPropertyName(o)&nbsp; &nbsp;//遍历对象不可枚举的属性<br>\r\n对象实例的方法<br> <br>\r\nvalueOf()：返回当前对象对应的值。&nbsp;&nbsp;<br>\r\ntoString()：返回当前对象对应的字符串形式。&nbsp;&nbsp;<br>\r\ntoLocaleString()：返回当前对象对应的本地字符串形式。&nbsp;&nbsp;<br>\r\nhasOwnProperty()：判断某个属性是否为当前对象自身的属性，还是继承自原型对象的属性。 <br>\r\nisPrototypeOf()：判断当前对象是否为另一个对象的原型。<br>\r\npropertyIsEnumerable()：判断某个属性是否可枚举。<br> <br> <br>\r\n-------------------------------------------------------------------------------------------\r\r\n---------------<br>\r\n3.2 Array对象<br> <br>\r\n（1）生成实例对象<br> <br>\r\nvar a = new Array()<br>\r\n（2）属性<br> <br>\r\na.length&nbsp;&nbsp;//长度<br>\r\n（3）Array.isArray()<br> <br>\r\nArray.isArray(a)&nbsp; &nbsp;//用来判断一个值是否为数组<br>\r\n（4）Array实例的方法<br> <br>\r\na.valueof()&nbsp; &nbsp;//返回数组本身<br>\r\na.toString()&nbsp;&nbsp;//返回数组的字符串形式<br>\r\na.push(value,vlaue....)&nbsp; &nbsp;//用于在数组的末端添加一个或多个元素，并返回添加新元素\r\r\n后的数组长度。<br>\r\npop()&nbsp; &nbsp;//用于删除数组的最后一个元素，并返回该元素<br>\r\njoin()&nbsp;&nbsp;//以参数作为分隔符，将所有数组成员组成一个字符串返回。如果不提供参数，默\r\r\n认用逗号分隔。<br>\r\nconcat()&nbsp;&nbsp;//用于多个数组的合并。它将新数组的成员，添加到原数组的尾部，然后返回一\r\r\n个新数组，原数组不变。<br>\r\nshift()&nbsp;&nbsp;//用于删除数组的第一个元素，并返回该元素。<br>\r\nunshift(value)&nbsp;&nbsp;//用于在数组的第一个位置添加元素，并返回添加新元素后的数组长度。\r\r\n<br>\r\nreverse()&nbsp; &nbsp;//用于颠倒数组中元素的顺序，返回改变后的数组<br>\r\nslice(start_index, upto_index);&nbsp; &nbsp;//用于提取原数组的一部分，返回一个新数组，原数\r\r\n组不变。第一个参数为起始位置（从0开始），第二个参数为终止位置（但该位置的元素本身不包括在内\r\r\n）。如果省略第二个参数，则一直返回到原数组的最后一个成员。负数表示倒数第几个。<br>\r\nsplice(index, count_to_remove, addElement1, addElement2, ...);&nbsp; &nbsp;//用于删除原数组\r\r\n的一部分成员，并可以在被删除的位置添加入新的数组成员，返回值是被删除的元素。第一个参数是删\r\r\n除的起始位置，第二个参数是被删除的元素个数。如果后面还有更多的参数，则表示这些就是要被插入\r\r\n数组的新元素。<br>\r\nsort()&nbsp; &nbsp;//对数组成员进行排序，默认是按照字典顺序排序。排序后，原数组将被改变。如\r\r\n果想让sort方法按照自定义方式排序，可以传入一个函数作为参数，表示按照自定义方法进行排序。该\r\r\n函数本身又接受两个参数，表示进行比较的两个元素。如果返回值大于0，表示第一个元素排在第二个元\r\r\n素后面；其他情况下，都是第一个元素排在第二个元素前面。<br>\r\nmap()&nbsp; &nbsp;//对数组的所有成员依次调用一个函数，根据函数结果返回一个新数组。<br>\r\nmap(elem,index,arr)&nbsp; &nbsp;//map方法接受一个函数作为参数。该函数调用时，map方法会将其\r\r\n传入三个参数，分别是当前成员、当前位置和数组本身。<br>\r\nforEach()&nbsp; &nbsp;//遍历数组的所有成员，执行某种操作,参数是一个函数。它接受三个参数，分\r\r\n别是当前位置的值、当前位置的编号和整个数组。<br>\r\nfilter()&nbsp; &nbsp;//参数是一个函数，所有数组成员依次执行该函数，返回结果为true的成员组成\r\r\n一个新数组返回。该方法不会改变原数组。<br>\r\nsome()&nbsp; &nbsp; //用来判断数组成员是否符合某种条件。接受一个函数作为参数，所有数组成员\r\r\n依次执行该函数，返回一个布尔值。该函数接受三个参数，依次是当前位置的成员、当前位置的序号和\r\r\n整个数组。只要有一个数组成员的返回值是true，则整个some方法的返回值就是true，否则false。<br>\r\nevery()&nbsp; &nbsp;//用来判断数组成员是否符合某种条件。接受一个函数作为参数，所有数组成员\r\r\n依次执行该函数，返回一个布尔值。该函数接受三个参数，依次是当前位置的成员、当前位置的序号和\r\r\n整个数组。所有数组成员的返回值都是true，才返回true，否则false。<br>\r\nreduce()&nbsp; &nbsp;//依次处理数组的每个成员，最终累计为一个值。从左到右处理（从第一个成员\r\r\n到最后一个成员）<br>\r\nreduceRight()&nbsp;&nbsp;//依次处理数组的每个成员，最终累计为一个值。从右到左（从最后一个成\r\r\n员到第一个成员）<br>\r\nindexOf(s)&nbsp; &nbsp;//返回给定元素在数组中第一次出现的位置，如果没有出现则返回-1。可以接\r\r\n受第二个参数，表示搜索的开始位置<br>\r\nlastIndexOf()&nbsp;&nbsp;//返回给定元素在数组中最后一次出现的位置，如果没有出现则返回-1。\r\r\n<br> <br>\r\n3.3 Number对象<br> <br>\r\n（1）生成对象<br> <br>\r\nvar n = new Number()<br>\r\n（2）Number对象的属性<br> <br>\r\nNumber.POSITIVE_INFINITY：正的无限，指向Infinity。&nbsp;&nbsp;<br>\r\nNumber.NEGATIVE_INFINITY：负的无限，指向-Infinity。&nbsp;&nbsp;<br>\r\nNumber.NaN：表示非数值，指向NaN。&nbsp;&nbsp;<br>\r\nNumber.MAX_VALUE：表示最大的正数，相应的，最小的负数为-Number.MAX_VALUE。&nbsp;&nbsp;<br>\r\nNumber.MIN_VALUE：表示最小的正数（即最接近0的正数，在64位浮点数体系中为5e-324），相应的，最\r\r\n接近0的负数为-Number.MIN_VALUE。&nbsp;&nbsp;<br>\r\nNumber.MAX_SAFE_INTEGER：表示能够精确表示的最大整数，即9007199254740991。&nbsp;&nbsp;<br>\r\nNumber.MIN_SAFE_INTEGER：表示能够精确表示的最小整数，即-9007199254740991。<br>\r\n（4）Number对象实例的方法<br> <br>\r\ntoString()&nbsp; &nbsp;//用来将一个数值转为字符串形式.可以接受一个参数，表示输出的进制。如\r\r\n果省略这个参数，默认将数值先转为十进制，再输出字符串；否则，就根据参数指定的进制，将一个数\r\r\n字转化成某个进制的字符串。<br>\r\ntoFixed()&nbsp; &nbsp;//用于将一个数转为指定位数的小数，返回这个小数对应的字符串。<br>\r\ntoExponential()&nbsp;&nbsp;//用于将一个数转为科学计数法形式。可传入一个参数，参数表示小数点\r\r\n后有效数字的位数，范围为0到20，超出这个范围，会抛出一个RangeError。<br>\r\ntoPrecision()&nbsp;&nbsp;//用于将一个数转为指定位数的有效数字。<br>\r\n3.4 String 对象<br> <br>\r\n（1）生成实例对象<br> <br>\r\nvar s = new String()<br>\r\n（2）String对象的属性<br> <br>\r\ns.length&nbsp; &nbsp;//返回字符串的长度<br>\r\n（3）方法<br> <br>\r\ns.chatAt(index)&nbsp; &nbsp;//返回指定位置的字符<br>\r\ns.fromCharCode()&nbsp; &nbsp; //该方法的参数是一系列Unicode码点，返回对应的字符串。<br>\r\ns.charCodeAt(index)&nbsp; &nbsp; //返回给定位置字符的Unicode码点（十进制表示）<br>\r\ns.concat(s2)&nbsp;&nbsp;//用于连接两个字符串<br>\r\ns.slice(start,end)&nbsp; &nbsp;//用于从原字符串取出子字符串并返回，不改变原字符串。第一个参\r\r\n数是子字符串的开始位置，第二个参数是子字符串的结束位置（不含该位置）。如果参数是负值，表示\r\r\n从结尾开始倒数计算的位置，即该负值加上字符串长度。<br>\r\ns.substring(start,end)&nbsp;&nbsp;//用于从原字符串取出子字符串并返回，不改变原字符串.第一个\r\r\n参数表示子字符串的开始位置，第二个位置表示结束位置。<br>\r\ns.substr(start,length)&nbsp; &nbsp;//用于从原字符串取出子字符串并返回，不改变原字符串。第一\r\r\n个参数是子字符串的开始位置，第二个参数是子字符串的长度。如果第一个参数是负数，表示倒数计算\r\r\n的字符位置。如果第二个参数是负数，将被自动转为0，因此会返回空字符串。<br>\r\ns.indexOf(s)&nbsp; &nbsp;//返回给定元素在字符串中第一次出现的位置，如果没有出现则返回-1。可\r\r\n以接受第二个参数，表示搜索的开始位置 <br>\r\ns.lastIndexOf()&nbsp;&nbsp;//返回给定元素在字符串中最后一次出现的位置，如果没有出现则返回-1\r\r\n。<br>\r\ns.trim()&nbsp;&nbsp;//用于去除字符串两端的空格，返回一个新字符串<br>\r\ns.toLowerCase()&nbsp;&nbsp;//用于将一个字符串全部转为小写,返回一个新字符串，不改变原字符串\r\r\n。<br>\r\ns.toUpperCase()&nbsp;&nbsp;//全部转为大写<br>\r\ns.localeCompare(s2)&nbsp;&nbsp;//用于比较两个字符串。它返回一个整数，如果小于0，表示第一个\r\r\n字符串小于第二个字符串；如果等于0，表示两者相等；如果大于0，表示第一个字符串大于第二个字符\r\r\n串。<br>\r\ns.match(regexp)&nbsp; &nbsp;//用于确定原字符串是否匹配某个子字符串，返回一个数组，成员为匹\r\r\n配的第一个字符串。如果没有找到匹配，则返回null。<br>\r\ns.search()&nbsp;&nbsp;//返回值为匹配的第一个位置。如果没有找到匹配，则返回-1。<br>\r\ns.replace(oldValue,newValue)&nbsp;&nbsp;//用于替换匹配的子字符串，一般情况下只替换第一个匹\r\r\n配（除非使用带有g修饰符的正则表达式）。<br>\r\ns.split()&nbsp;&nbsp;//按照给定规则分割字符串，返回一个由分割出来的子字符串组成的数组。还可\r\r\n传入第二个参数，决定了返回数组的成员数。<br> <br> <br>\r\n3.5 Math对象<br> <br>\r\n（1）属性<br> <br>\r\nMath.E：常数e。&nbsp;&nbsp;<br>\r\nMath.LN2：2的自然对数。&nbsp;&nbsp;<br>\r\nMath.LN10：10的自然对数。&nbsp;&nbsp;<br>\r\nMath.LOG2E：以2为底的e的对数。&nbsp;&nbsp;<br>\r\nMath.LOG10E：以10为底的e的对数。&nbsp;&nbsp;<br>\r\nMath.PI：常数Pi。&nbsp;&nbsp;<br>\r\nMath.SQRT1_2：0.5的平方根。&nbsp;&nbsp;<br>\r\nMath.SQRT2：2的平方根。<br>\r\n（2）数学方法<br> <br>\r\nMath.abs()：返回参数的绝对值&nbsp;&nbsp;<br>\r\nMath.ceil()：向上取整，接受一个参数，返回大于该参数的最小整数。 <br>\r\nMath.floor()：向下取整&nbsp;&nbsp;<br>\r\nMath.max(n,n1,...)：可接受多个参数，返回最大值&nbsp;&nbsp;<br>\r\nMath.min(n,n1,..)：可接受多个参数，返回最小值&nbsp;&nbsp;<br>\r\nMath.pow(n,e)：指数运算, 返回以第一个参数为底数、第二个参数为幂的指数值。 <br>\r\nMath.sqrt()：返回参数值的平方根。如果参数是一个负值，则返回NaN。&nbsp;&nbsp;<br>\r\nMath.log()：返回以e为底的自然对数值。<br>\r\nMath.exp()：返回e的指数，也就是常数e的参数次方。<br>\r\nMath.round()：四舍五入&nbsp;&nbsp;<br>\r\nMath.random()：返回0到1之间的一个伪随机数，可能等于0，但是一定小于1。<br>\r\n（3）三角函数方法<br> <br>\r\nMath.sin()：返回参数的正弦&nbsp;&nbsp;<br>\r\nMath.cos()：返回参数的余弦&nbsp;&nbsp;<br>\r\nMath.tan()：返回参数的正切&nbsp;&nbsp;<br>\r\nMath.asin()：返回参数的反正弦（弧度值）&nbsp;&nbsp;<br>\r\nMath.acos()：返回参数的反余弦（弧度值）&nbsp;&nbsp;<br>\r\nMath.atan()：返回参数的反正切（弧度值）<br> <br> <br>\r\n3.6 JSON对象<br> <br>\r\n（1）方法<br> <br>\r\nJSON.stringify()&nbsp; &nbsp;<br>\r\n//用于将一个值转为字符串。该字符串应该符合JSON格式，并且可以被JSON.parse方法还原。<br>\r\n//（JSON.stringify(obj, selectedProperties)）还可以接受一个数组，作为第二个参数，指定需要转\r\r\n成字符串的属性。<br>\r\n//还可以接受第三个参数，用于增加返回的JSON字符串的可读性。如果是数字，表示每个属性前面添加\r\r\n的空格（最多不超过10个）；如果是字符串（不超过10个字符），则该字符串会添加在每行前面。<br> \r\r\n<br>\r\nJSON.parse()&nbsp; &nbsp;//用于将JSON字符串转化成对象。<br>\r\n3.7 console对象<br> <br>\r\n（1）方法<br> <br>\r\nconsole.log(text,text2,...)&nbsp; &nbsp;//用于在console窗口输出信息。它可以接受多个参数，将\r\r\n它们的结果连接起来输出。如果第一个参数是格式字符串（使用了格式占位符），console.log方法将依\r\r\n次用后面的参数替换占位符，然后再进行输出。<br>\r\nconsole.info()&nbsp; &nbsp;//在console窗口输出信息，同时，会在输出信息的前面，加上一个蓝色\r\r\n图标。<br>\r\nconsole.debug()&nbsp;&nbsp;//在console窗口输出信息，同时，会在输出信息的前面，加上一个蓝色\r\r\n图标。<br>\r\nconsole.warn()&nbsp;&nbsp;//输出信息时，在最前面加一个黄色三角，表示警告；<br>\r\nconsole.error()&nbsp;&nbsp;//输出信息时，在最前面加一个红色的叉，表示出错，同时会显示错误发\r\r\n生的堆栈<br>\r\nconsole.table()&nbsp;&nbsp;//可以将复合类型的数据转为表格显示。<br>\r\nconsole.count()&nbsp;&nbsp;//用于计数，输出它被调用了多少次。<br>\r\nconsole.dir()&nbsp; &nbsp; //用来对一个对象进行检查（inspect），并以易于阅读和打印的格式显\r\r\n示。<br>\r\nconsole.dirxml()&nbsp;&nbsp;//用于以目录树的形式，显示DOM节点。<br>\r\nconsole.assert()&nbsp;&nbsp;//接受两个参数，第一个参数是表达式，第二个参数是字符串。只有当\r\r\n第一个参数为false，才会输出第二个参数，否则不会有任何结果。<br> <br>\r\n//这两个方法用于计时，可以算出一个操作所花费的准确时间。<br>\r\nconsole.time()<br>\r\nconsole.timeEnd()<br>\r\n//time方法表示计时开始，timeEnd方法表示计时结束。它们的参数是计时器的名称。调用timeEnd方法\r\r\n之后，console窗口会显示“计时器名称: 所耗费的时间”。<br> <br>\r\nconsole.profile()&nbsp;&nbsp;//用来新建一个性能测试器（profile），它的参数是性能测试器的名\r\r\n字。<br>\r\nconsole.profileEnd()&nbsp;&nbsp;//用来结束正在运行的性能测试器。<br> <br>\r\nconsole.group()<br>\r\nconsole.groupend()<br>\r\n//上面这两个方法用于将显示的信息分组。它只在输出大量信息时有用，分在一组的信息，可以用鼠标\r\r\n折叠/展开。<br>\r\nconsole.groupCollapsed()&nbsp;&nbsp;//用于将显示的信息分组，该组的内容，在第一次显示时是收\r\r\n起的（collapsed），而不是展开的。<br> <br>\r\nconsole.trace()&nbsp;&nbsp;//显示当前执行的代码在堆栈中的调用路径。<br>\r\nconsole.clear()&nbsp;&nbsp;//用于清除当前控制台的所有输出，将光标回置到第一行。\r\nNode.nodeName&nbsp; &nbsp;//返回节点名称，只读<br>\r\nNode.nodeType&nbsp; &nbsp;//返回节点类型的常数值，只读<br>\r\nNode.nodeValue&nbsp;&nbsp;//返回Text或Comment节点的文本值，只读<br>\r\nNode.textContent&nbsp;&nbsp;//返回当前节点和它的所有后代节点的文本内容，可读写<br>\r\nNode.baseURI&nbsp; &nbsp; //返回当前网页的绝对路径<br> <br>\r\nNode.ownerDocument&nbsp;&nbsp;//返回当前节点所在的顶层文档对象，即document<br>\r\nNode.nextSibling&nbsp;&nbsp;//返回紧跟在当前节点后面的第一个兄弟节点<br>\r\nNode.previousSibling&nbsp;&nbsp;//返回当前节点前面的、距离最近的一个兄弟节点<br>\r\nNode.parentNode&nbsp; &nbsp;//返回当前节点的父节点<br>\r\nNode.parentElement&nbsp;&nbsp;//返回当前节点的父Element节点<br>\r\nNode.childNodes&nbsp; &nbsp;//返回当前节点的所有子节点<br>\r\nNode.firstChild&nbsp;&nbsp;//返回当前节点的第一个子节点<br>\r\nNode.lastChild&nbsp; &nbsp;//返回当前节点的最后一个子节点<br> <br>\r\n//parentNode接口<br>\r\nNode.children&nbsp;&nbsp;//返回指定节点的所有Element子节点<br>\r\nNode.firstElementChild&nbsp;&nbsp;//返回当前节点的第一个Element子节点<br>\r\nNode.lastElementChild&nbsp; &nbsp;//返回当前节点的最后一个Element子节点<br>\r\nNode.childElementCount&nbsp;&nbsp;//返回当前节点所有Element子节点的数目。<br>\r\n-------------------------------------------------------------------------------------------\r\r\n---------------<br> <br>\r\n1.2 操作<br> <br>\r\nNode.appendChild(node)&nbsp; &nbsp;//向节点添加最后一个子节点<br>\r\nNode.hasChildNodes()&nbsp; &nbsp;//返回布尔值，表示当前节点是否有子节点<br>\r\nNode.cloneNode(true);&nbsp;&nbsp;// 默认为false(克隆节点), true(克隆节点及其属性，以及后\r\r\n代)<br>\r\nNode.insertBefore(newNode,oldNode)&nbsp;&nbsp;// 在指定子节点之前插入新的子节点<br>\r\nNode.removeChild(node)&nbsp; &nbsp;//删除节点，在要删除节点的父节点上操作<br>\r\nNode.replaceChild(newChild,oldChild)&nbsp;&nbsp;//替换节点<br>\r\nNode.contains(node)&nbsp;&nbsp;//返回一个布尔值，表示参数节点是否为当前节点的后代节点。<br>\r\nNode.compareDocumentPosition(node)&nbsp; &nbsp;//返回一个7个比特位的二进制值，表示参数节点\r\r\n和当前节点的关系<br>\r\nNode.isEqualNode(noe)&nbsp;&nbsp;//返回布尔值，用于检查两个节点是否相等。所谓相等的节点，指\r\r\n的是两个节点的类型相同、属性相同、子节点相同。<br>\r\nNode.normalize()&nbsp; &nbsp;//用于清理当前节点内部的所有Text节点。它会去除空的文本节点，并\r\r\n且将毗邻的文本节点合并成一个。<br> <br>\r\n//ChildNode接口<br>\r\nNode.remove()&nbsp;&nbsp;//用于删除当前节点<br>\r\nNode.before()&nbsp;&nbsp;//<br>\r\nNode.after()<br>\r\nNode.replaceWith()<br>\r\n-------------------------------------------------------------------------------------------\r\r\n---------------<br> <br> <br>\r\n1.3 Document节点<br> <br>\r\n1.3.1 Document节点的属性<br> <br>\r\ndocument.doctype&nbsp; &nbsp;//<br>\r\ndocument.documentElement&nbsp;&nbsp;//返回当前文档的根节点<br>\r\ndocument.defaultView&nbsp; &nbsp;//返回document对象所在的window对象<br>\r\ndocument.body&nbsp; &nbsp;//返回当前文档的&lt;body&gt;节点<br>\r\ndocument.head&nbsp; &nbsp;//返回当前文档的&lt;head&gt;节点<br>\r\ndocument.activeElement&nbsp;&nbsp;//返回当前文档中获得焦点的那个元素。<br> <br>\r\n//节点集合属性<br>\r\ndocument.links&nbsp;&nbsp;//返回当前文档的所有a元素<br>\r\ndocument.forms&nbsp;&nbsp;//返回页面中所有表单元素<br>\r\ndocument.images&nbsp;&nbsp;//返回页面中所有图片元素<br>\r\ndocument.embeds&nbsp;&nbsp;//返回网页中所有嵌入对象<br>\r\ndocument.scripts&nbsp;&nbsp;//返回当前文档的所有脚本<br>\r\ndocument.styleSheets&nbsp;&nbsp;//返回当前网页的所有样式表<br> <br>\r\n//文档信息属性<br>\r\ndocument.documentURI&nbsp;&nbsp;//表示当前文档的网址<br>\r\ndocument.URL&nbsp;&nbsp;//返回当前文档的网址<br>\r\ndocument.domain&nbsp;&nbsp;//返回当前文档的域名<br>\r\ndocument.lastModified&nbsp;&nbsp;//返回当前文档最后修改的时间戳<br>\r\ndocument.location&nbsp;&nbsp;//返回location对象，提供当前文档的URL信息<br>\r\ndocument.referrer&nbsp;&nbsp;//返回当前文档的访问来源<br>\r\ndocument.title&nbsp; &nbsp; //返回当前文档的标题<br>\r\ndocument.characterSet属性返回渲染当前文档的字符集，比如UTF-8、ISO-8859-1。<br>\r\ndocument.readyState&nbsp;&nbsp;//返回当前文档的状态<br>\r\ndocument.designMode&nbsp;&nbsp;//控制当前文档是否可编辑，可读写<br>\r\ndocument.compatMode&nbsp;&nbsp;//返回浏览器处理文档的模式<br>\r\ndocument.cookie&nbsp; &nbsp;//用来操作Cookie<br> <br> <br>\r\n1.3.2 Document节点的方法<br> <br>\r\n（1）读写方法<br> <br>\r\ndocument.open()&nbsp; &nbsp;//用于新建并打开一个文档<br>\r\ndocument.close()&nbsp; &nbsp;//不安比open方法所新建的文档<br>\r\ndocument.write()&nbsp; &nbsp;//用于向当前文档写入内容<br>\r\ndocument.writeIn()&nbsp;&nbsp;//用于向当前文档写入内容，尾部添加换行符。<br>\r\n（2）查找节点<br> <br>\r\ndocument.querySelector(selectors)&nbsp; &nbsp;//接受一个CSS选择器作为参数，返回第一个匹配该\r\r\n选择器的元素节点。<br>\r\ndocument.querySelectorAll(selectors)&nbsp;&nbsp;//接受一个CSS选择器作为参数，返回所有匹配该\r\r\n选择器的元素节点。<br>\r\ndocument.getElementsByTagName(tagName)&nbsp;&nbsp;//返回所有指定HTML标签的元素<br>\r\ndocument.getElementsByClassName(className)&nbsp; &nbsp;//返回包括了所有class名字符合指定条\r\r\n件的元素<br>\r\ndocument.getElementsByName(name)&nbsp; &nbsp;//用于选择拥有name属性的HTML元素（比如\r\r\n&lt;form&gt;、&lt;radio&gt;、&lt;img&gt;、&lt;frame&gt;、&lt;embed&gt;和&lt;object&gt;等）\r\r\n<br>\r\ndocument.getElementById(id)&nbsp; &nbsp;//返回匹配指定id属性的元素节点。<br>\r\ndocument.elementFromPoint(x,y)&nbsp;&nbsp;//返回位于页面指定位置最上层的Element子节点。<br>\r\n（3）生成节点<br> <br>\r\ndocument.createElement(tagName)&nbsp; &nbsp;//用来生成HTML元素节点。<br>\r\ndocument.createTextNode(text)&nbsp; &nbsp;//用来生成文本节点<br>\r\ndocument.createAttribute(name)&nbsp;&nbsp;//生成一个新的属性对象节点，并返回它。<br>\r\ndocument.createDocumentFragment()&nbsp;&nbsp;//生成一个DocumentFragment对象<br>\r\n（4）事件方法<br> <br>\r\ndocument.createEvent(type)&nbsp; &nbsp;//生成一个事件对象，该对象能被element.dispatchEvent\r\r\n()方法使用<br>\r\ndocument.addEventListener(type,listener,capture)&nbsp;&nbsp;//注册事件<br>\r\ndocument.removeEventListener(type,listener,capture)&nbsp;&nbsp;//注销事件<br>\r\ndocument.dispatchEvent(event)&nbsp;&nbsp;//触发事件<br>\r\n（5）其他<br> <br>\r\ndocument.hasFocus()&nbsp; &nbsp;//返回一个布尔值，表示当前文档之中是否有元素被激活或获得焦\r\r\n点。<br>\r\ndocument.adoptNode(externalNode)&nbsp;&nbsp;//将某个节点，从其原来所在的文档移除，插入当前\r\r\n文档，并返回插入后的新节点。<br>\r\ndocument.importNode(externalNode, deep)&nbsp; &nbsp;//从外部文档拷贝指定节点，插入当前文档\r\r\n。<br>\r\n-------------------------------------------------------------------------------------------\r\r\n---------------<br> <br> <br>\r\n1.4 Element节点<br> <br>\r\n1.4.1 Element节点的属性<br> <br>\r\n（1）特性属性<br> <br>\r\nElement.attributes&nbsp;&nbsp;//返回当前元素节点的所有属性节点<br>\r\nElement.id&nbsp;&nbsp;//返回指定元素的id属性，可读写<br>\r\nElement.tagName&nbsp;&nbsp;//返回指定元素的大写标签名<br>\r\nElement.innerHTML&nbsp; &nbsp;//返回该元素包含的HTML代码，可读写<br>\r\nElement.outerHTML&nbsp;&nbsp;//返回指定元素节点的所有HTML代码，包括它自身和包含的的所有子元\r\r\n素，可读写<br>\r\nElement.className&nbsp;&nbsp;//返回当前元素的class属性，可读写<br>\r\nElement.classList&nbsp;&nbsp;//返回当前元素节点的所有class集合<br>\r\nElement.dataset&nbsp; &nbsp;//返回元素节点中所有的data-*属性。<br>\r\n（2）尺寸属性<br> <br>\r\nElement.clientHeight&nbsp; &nbsp;//返回元素节点可见部分的高度<br>\r\nElement.clientWidth&nbsp; &nbsp;//返回元素节点可见部分的宽度<br>\r\nElement.clientLeft&nbsp; &nbsp;//返回元素节点左边框的宽度<br>\r\nElement.clientTop&nbsp; &nbsp;//返回元素节点顶部边框的宽度<br>\r\nElement.scrollHeight&nbsp;&nbsp;//返回元素节点的总高度<br>\r\nElement.scrollWidth&nbsp;&nbsp;//返回元素节点的总宽度<br>\r\nElement.scrollLeft&nbsp; &nbsp;//返回元素节点的水平滚动条向右滚动的像素数值,通过设置这个属\r\r\n性可以改变元素的滚动位置<br>\r\nElement.scrollTop&nbsp; &nbsp;//返回元素节点的垂直滚动向下滚动的像素数值<br>\r\nElement.offsetHeight&nbsp; &nbsp;//返回元素的垂直高度(包含border,padding)<br>\r\nElement.offsetWidth&nbsp; &nbsp; //返回元素的水平宽度(包含border,padding)<br>\r\nElement.offsetLeft&nbsp; &nbsp; //返回当前元素左上角相对于Element.offsetParent节点的垂直偏\r\r\n移<br>\r\nElement.offsetTop&nbsp; &nbsp;//返回水平位移<br>\r\nElement.style&nbsp;&nbsp;//返回元素节点的行内样式<br>\r\n（3）节点相关属性<br> <br>\r\nElement.children&nbsp; &nbsp;//包括当前元素节点的所有子元素<br>\r\nElement.childElementCount&nbsp; &nbsp;//返回当前元素节点包含的子HTML元素节点的个数<br>\r\nElement.firstElementChild&nbsp;&nbsp;//返回当前节点的第一个Element子节点&nbsp;&nbsp;<br>\r\nElement.lastElementChild&nbsp; &nbsp;//返回当前节点的最后一个Element子节点&nbsp;&nbsp;<br>\r\nElement.nextElementSibling&nbsp;&nbsp;//返回当前元素节点的下一个兄弟HTML元素节点<br>\r\nElement.previousElementSibling&nbsp;&nbsp;//返回当前元素节点的前一个兄弟HTML节点<br>\r\nElement.offsetParent&nbsp; &nbsp;//返回当前元素节点的最靠近的、并且CSS的position属性不等于\r\r\nstatic的父元素。<br>\r\n1.4.2 Element节点的方法<br> <br>\r\n（1）位置方法<br> <br>\r\ngetBoundingClientRect()&nbsp;&nbsp;<br>\r\n// getBoundingClientRect返回一个对象，包含top,left,right,bottom,width,height // width、\r\r\nheight 元素自身宽高<br>\r\n// top 元素上外边界距窗口最上面的距离<br>\r\n// right 元素右外边界距窗口最上面的距离<br>\r\n// bottom 元素下外边界距窗口最上面的距离<br>\r\n// left 元素左外边界距窗口最上面的距离<br>\r\n// width 元素自身宽(包含border,padding) <br>\r\n// height 元素自身高(包含border,padding) <br> <br>\r\ngetClientRects()&nbsp; &nbsp;//返回当前元素在页面上形参的所有矩形。<br> <br>\r\n// 元素在页面上的偏移量&nbsp;&nbsp;<br>\r\nvar rect = el.getBoundingClientRect()&nbsp;&nbsp;<br>\r\nreturn {&nbsp; &nbsp;<br>\r\n&nbsp;&nbsp;top: rect.top + document.body.scrollTop,&nbsp; &nbsp;<br>\r\n&nbsp;&nbsp;left: rect.left + document.body.scrollLeft&nbsp;&nbsp;<br>\r\n}<br>\r\n（2）属性方法<br> <br>\r\nElement.getAttribute()：读取指定属性&nbsp;&nbsp;<br>\r\nElement.setAttribute()：设置指定属性&nbsp;&nbsp;<br>\r\nElement.hasAttribute()：返回一个布尔值，表示当前元素节点是否有指定的属性&nbsp;&nbsp;<br>\r\nElement.removeAttribute()：移除指定属性<br>\r\n（3）查找方法<br> <br>\r\nElement.querySelector()&nbsp;&nbsp;<br>\r\nElement.querySelectorAll()&nbsp;&nbsp;<br>\r\nElement.getElementsByTagName()&nbsp;&nbsp;<br>\r\nElement.getElementsByClassName()<br>\r\n（4）事件方法<br> <br>\r\nElement.addEventListener()：添加事件的回调函数&nbsp;&nbsp;<br>\r\nElement.removeEventListener()：移除事件监听函数&nbsp;&nbsp;<br>\r\nElement.dispatchEvent()：触发事件<br> <br>\r\n//ie8<br>\r\nElement.attachEvent(oneventName,listener)<br>\r\nElement.detachEvent(oneventName,listener)<br> <br>\r\n// event对象&nbsp;&nbsp;<br>\r\nvar event = window.event||event;&nbsp; &nbsp; <br> <br>\r\n// 事件的目标节点&nbsp;&nbsp;<br>\r\nvar target = event.target || event.srcElement;<br> <br>\r\n// 事件代理&nbsp;&nbsp;<br>\r\nul.addEventListener(\'click\', function(event) {&nbsp; &nbsp;<br>\r\n&nbsp;&nbsp;if (event.target.tagName.toLowerCase() === \'li\') {&nbsp; &nbsp;<br>\r\n&nbsp; &nbsp; console.log(event.target.innerHTML)&nbsp; &nbsp;<br>\r\n&nbsp;&nbsp;}&nbsp;&nbsp;<br>\r\n});<br>\r\n（5）其他<br> <br>\r\nElement.scrollIntoView()&nbsp; &nbsp;//滚动当前元素，进入浏览器的可见区域<br> <br>\r\n//解析HTML字符串，然后将生成的节点插入DOM树的指定位置。<br>\r\nElement.insertAdjacentHTML(where, htmlString); <br>\r\nElement.insertAdjacentHTML(\'beforeBegin\', htmlString); // 在该元素前插入&nbsp;&nbsp;<br>\r\nElement.insertAdjacentHTML(\'afterBegin\', htmlString); // 在该元素第一个子元素前插入 <br>\r\nElement.insertAdjacentHTML(\'beforeEnd\', htmlString); // 在该元素最后一个子元素后面插入 <br>\r\nElement.insertAdjacentHTML(\'afterEnd\', htmlString); // 在该元素后插入<br> <br>\r\nElement.remove()&nbsp;&nbsp;//用于将当前元素节点从DOM中移除<br>\r\nElement.focus()&nbsp; &nbsp;//用于将当前页面的焦点，转移到指定元素上<br> <br> <font \r\r\nsize=\"6\">二、CSS操作</font><br> <br> <br>\r\n（1）类名操作<br> <br>\r\n//ie8以下<br>\r\nElement.className&nbsp;&nbsp;//获取元素节点的类名<br>\r\nElement.className += \' \' + newClassName&nbsp;&nbsp;//新增一个类名<br> <br>\r\n//判断是否有某个类名<br>\r\nfunction hasClass(element,className){<br>\r\n&nbsp;&nbsp;return new RegExp(className,\'gi\').test(element.className);<br>\r\n}<br> <br>\r\n//移除class<br>\r\nfunction removeClass(element,className){<br>\r\n&nbsp;&nbsp;element.className = element.className.replace(new RegExp(\'(^|\\\\b)\' + \r\r\nclassName.split(\' \').join(\'|\') + \'(\\\\b|$)\', \'gi\'),\'\');<br>\r\n}<br> <br>\r\n//ie10 <br>\r\nelement.classList.add(className)&nbsp;&nbsp;//新增<br>\r\nelement.classList.remove(className)&nbsp;&nbsp;//删除<br>\r\nelement.classList.contains(className)&nbsp;&nbsp;//是否包含<br>\r\nelement.classList.toggle(className)&nbsp;&nbsp;//toggle class<br> <br>\r\n-------------------------------------------------------------------------------------------\r\r\n---------------<br> <br> <br>\r\n（2）style操作<br> <br>\r\nelement.setAttribute(\'style\',\'\')<br> <br>\r\nelement.style.backgroundColor = \'red\'<br> <br>\r\nelement.style.cssText //用来读写或删除整个style属性<br> <br>\r\nelement.style.setProperty(propertyName,value)&nbsp;&nbsp;//设置css属性<br>\r\nelement.style.getPropertyValue(property)&nbsp;&nbsp;//获取css属性<br>\r\nelement.style.removeProperty(property)&nbsp;&nbsp;//删除css属性<br>\r\n操作非内联样式<br>\r\n//ie8<br>\r\nelement.currentStyle[attrName]//ie9+<br>\r\nwindow.getComputedStyle(el,null)[attrName] <br>\r\nwindow.getComputedStyle(el,null).getPropertyValue(attrName)<br>\r\n//伪类<br>\r\nwindow.getComputedStyle(el,\':after\')[attrName]<br>\r\n-------------------------------------------------------------------------------------------\r\r\n---------------<br> <font size=\"6\">三、对象</font><br> <br>\r\n3.1 Object对象<br> <br>\r\n（1）生成实例对象<br> <br>\r\nvar o = new Object()<br>\r\n（2）属性<br> <br>\r\nObject.prototype&nbsp; &nbsp;//返回原型对象<br>\r\n（3）方法<br> <br>\r\nObject.keys(o)&nbsp; &nbsp;//遍历对象的可枚举属性<br>\r\nObject.getOwnPropertyName(o)&nbsp; &nbsp;//遍历对象不可枚举的属性<br>\r\n对象实例的方法<br> <br>\r\nvalueOf()：返回当前对象对应的值。&nbsp;&nbsp;<br>\r\ntoString()：返回当前对象对应的字符串形式。&nbsp;&nbsp;<br>\r\ntoLocaleString()：返回当前对象对应的本地字符串形式。&nbsp;&nbsp;<br>\r\nhasOwnProperty()：判断某个属性是否为当前对象自身的属性，还是继承自原型对象的属性。 <br>\r\nisPrototypeOf()：判断当前对象是否为另一个对象的原型。<br>\r\npropertyIsEnumerable()：判断某个属性是否可枚举。<br> <br> <br>\r\n-------------------------------------------------------------------------------------------\r\r\n---------------<br>\r\n3.2 Array对象<br> <br>\r\n（1）生成实例对象<br> <br>\r\nvar a = new Array()<br>\r\n（2）属性<br> <br>\r\na.length&nbsp;&nbsp;//长度<br>\r\n（3）Array.isArray()<br> <br>\r\nArray.isArray(a)&nbsp; &nbsp;//用来判断一个值是否为数组<br>\r\n（4）Array实例的方法<br> <br>\r\na.valueof()&nbsp; &nbsp;//返回数组本身<br>\r\na.toString()&nbsp;&nbsp;//返回数组的字符串形式<br>\r\na.push(value,vlaue....)&nbsp; &nbsp;//用于在数组的末端添加一个或多个元素，并返回添加新元素\r\r\n后的数组长度。<br>\r\npop()&nbsp; &nbsp;//用于删除数组的最后一个元素，并返回该元素<br>\r\njoin()&nbsp;&nbsp;//以参数作为分隔符，将所有数组成员组成一个字符串返回。如果不提供参数，默\r\r\n认用逗号分隔。<br>\r\nconcat()&nbsp;&nbsp;//用于多个数组的合并。它将新数组的成员，添加到原数组的尾部，然后返回一\r\r\n个新数组，原数组不变。<br>\r\nshift()&nbsp;&nbsp;//用于删除数组的第一个元素，并返回该元素。<br>\r\nunshift(value)&nbsp;&nbsp;//用于在数组的第一个位置添加元素，并返回添加新元素后的数组长度。\r\r\n<br>\r\nreverse()&nbsp; &nbsp;//用于颠倒数组中元素的顺序，返回改变后的数组<br>\r\nslice(start_index, upto_index);&nbsp; &nbsp;//用于提取原数组的一部分，返回一个新数组，原数\r\r\n组不变。第一个参数为起始位置（从0开始），第二个参数为终止位置（但该位置的元素本身不包括在内\r\r\n）。如果省略第二个参数，则一直返回到原数组的最后一个成员。负数表示倒数第几个。<br>\r\nsplice(index, count_to_remove, addElement1, addElement2, ...);&nbsp; &nbsp;//用于删除原数组\r\r\n的一部分成员，并可以在被删除的位置添加入新的数组成员，返回值是被删除的元素。第一个参数是删\r\r\n除的起始位置，第二个参数是被删除的元素个数。如果后面还有更多的参数，则表示这些就是要被插入\r\r\n数组的新元素。<br>\r\nsort()&nbsp; &nbsp;//对数组成员进行排序，默认是按照字典顺序排序。排序后，原数组将被改变。如\r\r\n果想让sort方法按照自定义方式排序，可以传入一个函数作为参数，表示按照自定义方法进行排序。该\r\r\n函数本身又接受两个参数，表示进行比较的两个元素。如果返回值大于0，表示第一个元素排在第二个元\r\r\n素后面；其他情况下，都是第一个元素排在第二个元素前面。<br>\r\nmap()&nbsp; &nbsp;//对数组的所有成员依次调用一个函数，根据函数结果返回一个新数组。<br>\r\nmap(elem,index,arr)&nbsp; &nbsp;//map方法接受一个函数作为参数。该函数调用时，map方法会将其\r\r\n传入三个参数，分别是当前成员、当前位置和数组本身。<br>\r\nforEach()&nbsp; &nbsp;//遍历数组的所有成员，执行某种操作,参数是一个函数。它接受三个参数，分\r\r\n别是当前位置的值、当前位置的编号和整个数组。<br>\r\nfilter()&nbsp; &nbsp;//参数是一个函数，所有数组成员依次执行该函数，返回结果为true的成员组成\r\r\n一个新数组返回。该方法不会改变原数组。<br>\r\nsome()&nbsp; &nbsp; //用来判断数组成员是否符合某种条件。接受一个函数作为参数，所有数组成员\r\r\n依次执行该函数，返回一个布尔值。该函数接受三个参数，依次是当前位置的成员、当前位置的序号和\r\r\n整个数组。只要有一个数组成员的返回值是true，则整个some方法的返回值就是true，否则false。<br>\r\nevery()&nbsp; &nbsp;//用来判断数组成员是否符合某种条件。接受一个函数作为参数，所有数组成员\r\r\n依次执行该函数，返回一个布尔值。该函数接受三个参数，依次是当前位置的成员、当前位置的序号和\r\r\n整个数组。所有数组成员的返回值都是true，才返回true，否则false。<br>\r\nreduce()&nbsp; &nbsp;//依次处理数组的每个成员，最终累计为一个值。从左到右处理（从第一个成员\r\r\n到最后一个成员）<br>\r\nreduceRight()&nbsp;&nbsp;//依次处理数组的每个成员，最终累计为一个值。从右到左（从最后一个成\r\r\n员到第一个成员）<br>\r\nindexOf(s)&nbsp; &nbsp;//返回给定元素在数组中第一次出现的位置，如果没有出现则返回-1。可以接\r\r\n受第二个参数，表示搜索的开始位置<br>\r\nlastIndexOf()&nbsp;&nbsp;//返回给定元素在数组中最后一次出现的位置，如果没有出现则返回-1。\r\r\n<br> <br>\r\n3.3 Number对象<br> <br>\r\n（1）生成对象<br> <br>\r\nvar n = new Number()<br>\r\n（2）Number对象的属性<br> <br>\r\nNumber.POSITIVE_INFINITY：正的无限，指向Infinity。&nbsp;&nbsp;<br>\r\nNumber.NEGATIVE_INFINITY：负的无限，指向-Infinity。&nbsp;&nbsp;<br>\r\nNumber.NaN：表示非数值，指向NaN。&nbsp;&nbsp;<br>\r\nNumber.MAX_VALUE：表示最大的正数，相应的，最小的负数为-Number.MAX_VALUE。&nbsp;&nbsp;<br>\r\nNumber.MIN_VALUE：表示最小的正数（即最接近0的正数，在64位浮点数体系中为5e-324），相应的，最\r\r\n接近0的负数为-Number.MIN_VALUE。&nbsp;&nbsp;<br>\r\nNumber.MAX_SAFE_INTEGER：表示能够精确表示的最大整数，即9007199254740991。&nbsp;&nbsp;<br>\r\nNumber.MIN_SAFE_INTEGER：表示能够精确表示的最小整数，即-9007199254740991。<br>\r\n（4）Number对象实例的方法<br> <br>\r\ntoString()&nbsp; &nbsp;//用来将一个数值转为字符串形式.可以接受一个参数，表示输出的进制。如\r\r\n果省略这个参数，默认将数值先转为十进制，再输出字符串；否则，就根据参数指定的进制，将一个数\r\r\n字转化成某个进制的字符串。<br>\r\ntoFixed()&nbsp; &nbsp;//用于将一个数转为指定位数的小数，返回这个小数对应的字符串。<br>\r\ntoExponential()&nbsp;&nbsp;//用于将一个数转为科学计数法形式。可传入一个参数，参数表示小数点\r\r\n后有效数字的位数，范围为0到20，超出这个范围，会抛出一个RangeError。<br>\r\ntoPrecision()&nbsp;&nbsp;//用于将一个数转为指定位数的有效数字。<br>\r\n3.4 String 对象<br> <br>\r\n（1）生成实例对象<br> <br>\r\nvar s = new String()<br>\r\n（2）String对象的属性<br> <br>\r\ns.length&nbsp; &nbsp;//返回字符串的长度<br>\r\n（3）方法<br> <br>\r\ns.chatAt(index)&nbsp; &nbsp;//返回指定位置的字符<br>\r\ns.fromCharCode()&nbsp; &nbsp; //该方法的参数是一系列Unicode码点，返回对应的字符串。<br>\r\ns.charCodeAt(index)&nbsp; &nbsp; //返回给定位置字符的Unicode码点（十进制表示）<br>\r\ns.concat(s2)&nbsp;&nbsp;//用于连接两个字符串<br>\r\ns.slice(start,end)&nbsp; &nbsp;//用于从原字符串取出子字符串并返回，不改变原字符串。第一个参\r\r\n数是子字符串的开始位置，第二个参数是子字符串的结束位置（不含该位置）。如果参数是负值，表示\r\r\n从结尾开始倒数计算的位置，即该负值加上字符串长度。<br>\r\ns.substring(start,end)&nbsp;&nbsp;//用于从原字符串取出子字符串并返回，不改变原字符串.第一个\r\r\n参数表示子字符串的开始位置，第二个位置表示结束位置。<br>\r\ns.substr(start,length)&nbsp; &nbsp;//用于从原字符串取出子字符串并返回，不改变原字符串。第一\r\r\n个参数是子字符串的开始位置，第二个参数是子字符串的长度。如果第一个参数是负数，表示倒数计算\r\r\n的字符位置。如果第二个参数是负数，将被自动转为0，因此会返回空字符串。<br>\r\ns.indexOf(s)&nbsp; &nbsp;//返回给定元素在字符串中第一次出现的位置，如果没有出现则返回-1。可\r\r\n以接受第二个参数，表示搜索的开始位置 <br>\r\ns.lastIndexOf()&nbsp;&nbsp;//返回给定元素在字符串中最后一次出现的位置，如果没有出现则返回-1\r\r\n。<br>\r\ns.trim()&nbsp;&nbsp;//用于去除字符串两端的空格，返回一个新字符串<br>\r\ns.toLowerCase()&nbsp;&nbsp;//用于将一个字符串全部转为小写,返回一个新字符串，不改变原字符串\r\r\n。<br>\r\ns.toUpperCase()&nbsp;&nbsp;//全部转为大写<br>\r\ns.localeCompare(s2)&nbsp;&nbsp;//用于比较两个字符串。它返回一个整数，如果小于0，表示第一个\r\r\n字符串小于第二个字符串；如果等于0，表示两者相等；如果大于0，表示第一个字符串大于第二个字符\r\r\n串。<br>\r\ns.match(regexp)&nbsp; &nbsp;//用于确定原字符串是否匹配某个子字符串，返回一个数组，成员为匹\r\r\n配的第一个字符串。如果没有找到匹配，则返回null。<br>\r\ns.search()&nbsp;&nbsp;//返回值为匹配的第一个位置。如果没有找到匹配，则返回-1。<br>\r\ns.replace(oldValue,newValue)&nbsp;&nbsp;//用于替换匹配的子字符串，一般情况下只替换第一个匹\r\r\n配（除非使用带有g修饰符的正则表达式）。<br>\r\ns.split()&nbsp;&nbsp;//按照给定规则分割字符串，返回一个由分割出来的子字符串组成的数组。还可\r\r\n传入第二个参数，决定了返回数组的成员数。<br> <br> <br>\r\n3.5 Math对象<br> <br>\r\n（1）属性<br> <br>\r\nMath.E：常数e。&nbsp;&nbsp;<br>\r\nMath.LN2：2的自然对数。&nbsp;&nbsp;<br>\r\nMath.LN10：10的自然对数。&nbsp;&nbsp;<br>\r\nMath.LOG2E：以2为底的e的对数。&nbsp;&nbsp;<br>\r\nMath.LOG10E：以10为底的e的对数。&nbsp;&nbsp;<br>\r\nMath.PI：常数Pi。&nbsp;&nbsp;<br>\r\nMath.SQRT1_2：0.5的平方根。&nbsp;&nbsp;<br>\r\nMath.SQRT2：2的平方根。<br>\r\n（2）数学方法<br> <br>\r\nMath.abs()：返回参数的绝对值&nbsp;&nbsp;<br>\r\nMath.ceil()：向上取整，接受一个参数，返回大于该参数的最小整数。 <br>\r\nMath.floor()：向下取整&nbsp;&nbsp;<br>\r\nMath.max(n,n1,...)：可接受多个参数，返回最大值&nbsp;&nbsp;<br>\r\nMath.min(n,n1,..)：可接受多个参数，返回最小值&nbsp;&nbsp;<br>\r\nMath.pow(n,e)：指数运算, 返回以第一个参数为底数、第二个参数为幂的指数值。 <br>\r\nMath.sqrt()：返回参数值的平方根。如果参数是一个负值，则返回NaN。&nbsp;&nbsp;<br>\r\nMath.log()：返回以e为底的自然对数值。<br>\r\nMath.exp()：返回e的指数，也就是常数e的参数次方。<br>\r\nMath.round()：四舍五入&nbsp;&nbsp;<br>\r\nMath.random()：返回0到1之间的一个伪随机数，可能等于0，但是一定小于1。<br>\r\n（3）三角函数方法<br> <br>\r\nMath.sin()：返回参数的正弦&nbsp;&nbsp;<br>\r\nMath.cos()：返回参数的余弦&nbsp;&nbsp;<br>\r\nMath.tan()：返回参数的正切&nbsp;&nbsp;<br>\r\nMath.asin()：返回参数的反正弦（弧度值）&nbsp;&nbsp;<br>\r\nMath.acos()：返回参数的反余弦（弧度值）&nbsp;&nbsp;<br>\r\nMath.atan()：返回参数的反正切（弧度值）<br> <br> <br>\r\n3.6 JSON对象<br> <br>\r\n（1）方法<br> <br>\r\nJSON.stringify()&nbsp; &nbsp;<br>\r\n//用于将一个值转为字符串。该字符串应该符合JSON格式，并且可以被JSON.parse方法还原。<br>\r\n//（JSON.stringify(obj, selectedProperties)）还可以接受一个数组，作为第二个参数，指定需要转\r\r\n成字符串的属性。<br>\r\n//还可以接受第三个参数，用于增加返回的JSON字符串的可读性。如果是数字，表示每个属性前面添加\r\r\n的空格（最多不超过10个）；如果是字符串（不超过10个字符），则该字符串会添加在每行前面。<br> \r\r\n<br>\r\nJSON.parse()&nbsp; &nbsp;//用于将JSON字符串转化成对象。<br>\r\n3.7 console对象<br> <br>\r\n（1）方法<br> <br>\r\nconsole.log(text,text2,...)&nbsp; &nbsp;//用于在console窗口输出信息。它可以接受多个参数，将\r\r\n它们的结果连接起来输出。如果第一个参数是格式字符串（使用了格式占位符），console.log方法将依\r\r\n次用后面的参数替换占位符，然后再进行输出。<br>\r\nconsole.info()&nbsp; &nbsp;//在console窗口输出信息，同时，会在输出信息的前面，加上一个蓝色\r\r\n图标。<br>\r\nconsole.debug()&nbsp;&nbsp;//在console窗口输出信息，同时，会在输出信息的前面，加上一个蓝色\r\r\n图标。<br>\r\nconsole.warn()&nbsp;&nbsp;//输出信息时，在最前面加一个黄色三角，表示警告；<br>\r\nconsole.error()&nbsp;&nbsp;//输出信息时，在最前面加一个红色的叉，表示出错，同时会显示错误发\r\r\n生的堆栈<br>\r\nconsole.table()&nbsp;&nbsp;//可以将复合类型的数据转为表格显示。<br>\r\nconsole.count()&nbsp;&nbsp;//用于计数，输出它被调用了多少次。<br>\r\nconsole.dir()&nbsp; &nbsp; //用来对一个对象进行检查（inspect），并以易于阅读和打印的格式显\r\r\n示。<br>\r\nconsole.dirxml()&nbsp;&nbsp;//用于以目录树的形式，显示DOM节点。<br>\r\nconsole.assert()&nbsp;&nbsp;//接受两个参数，第一个参数是表达式，第二个参数是字符串。只有当\r\r\n第一个参数为false，才会输出第二个参数，否则不会有任何结果。<br> <br>\r\n//这两个方法用于计时，可以算出一个操作所花费的准确时间。<br>\r\nconsole.time()<br>\r\nconsole.timeEnd()<br>\r\n//time方法表示计时开始，timeEnd方法表示计时结束。它们的参数是计时器的名称。调用timeEnd方法\r\r\n之后，console窗口会显示“计时器名称: 所耗费的时间”。<br> <br>\r\nconsole.profile()&nbsp;&nbsp;//用来新建一个性能测试器（profile），它的参数是性能测试器的名\r\r\n字。<br>\r\nconsole.profileEnd()&nbsp;&nbsp;//用来结束正在运行的性能测试器。<br> <br>\r\nconsole.group()<br>\r\nconsole.groupend()<br>\r\n//上面这两个方法用于将显示的信息分组。它只在输出大量信息时有用，分在一组的信息，可以用鼠标\r\r\n折叠/展开。<br>\r\nconsole.groupCollapsed()&nbsp;&nbsp;//用于将显示的信息分组，该组的内容，在第一次显示时是收\r\r\n起的（collapsed），而不是展开的。<br> <br>\r\nconsole.trace()&nbsp;&nbsp;//显示当前执行的代码在堆栈中的调用路径。<br>\r\nconsole.clear()&nbsp;&nbsp;//用于清除当前控制台的所有输出，将光标回置到第一行。', '1', '2017-03-13 16:21:06', '1', '32', '29', '1', '11', '5');
INSERT INTO `article` VALUES ('6', 'Vue 2.0 Hello World', 'Vue 2.0 Hello WorldVue 2.0 Hello WorldVue 2.0 Hello WorldVue 2.0 Hello WorldVue 2.0 Hello WorldVue 2.0 Hello World', '1', '2017-03-31 13:30:38', '1', '4', '0', '1', '0', '0');
INSERT INTO `article` VALUES ('7', 'babababa', '笔记管理笔记管理笔记管理笔记管理笔记管理笔记管理', '1', '2017-03-31 14:11:32', '4', '2', '0', '2', '0', '0');
INSERT INTO `article` VALUES ('8', 'Vue 2.0 Hello World', '啊发发发沙发上', '1', '2017-03-31 14:13:09', '2', '1', '0', '2', '0', '0');
INSERT INTO `article` VALUES ('18', '第一篇测试笔记', '<span style=\'background-color:#ff0000;\'>红色</span>蓝色<span style=\'background-color:#00b0f0;\'></span><span style=\'background-color:#00b050;\'>绿色</span><b>加粗</b>\n<span style=\'text-align:center;\'>居中</span>\n<span style=\'background-color:#ff0000;\'>红色</span>蓝色<span style=\'background-color:#00b0f0;\'></span><span style=\'background-color:#00b050;\'>绿色</span><b>加粗</b>\n<span style=\'text-align:center;\'>居中</span>\n第一篇测试笔<span style=\'background-color:#595959;\'>记第一篇</span>测试笔记第一篇测试笔记第一篇测试笔记<b>第一篇测试</b>笔记第一篇测试笔记第一篇测试笔记第一篇测试笔记第一篇测试笔记第一篇测试笔记', '1', '2017-03-31 19:17:21', '8', '25', '0', '3', '0', '0');
INSERT INTO `article` VALUES ('19', '第一篇测试笔记', '<span style=\'color:#ff0000;\'>红色</span>蓝色<span style=\'color:#00b0f0;\'></span><span style=\'color:#00b050;\'>绿色</span><b>加粗</b>\n<span style=\'text-align:center;\'>居中</span>\n<span style=\'color:#ff0000;\'>红色</span>蓝色<span style=\'color:#00b0f0;\'></span><span style=\'color:#00b050;\'>绿色</span><b>加粗</b>\n<span style=\'text-align:center;\'>居中</span>\n第一篇测试笔<span style=\'color:#595959;\'>记第一篇</span>测试笔记第一篇测试笔记第一篇测试笔记<b>第一篇测试</b>笔记第一篇测试笔记第一篇测试笔记第一篇测试笔记第一篇测试笔记第一篇测试笔记', '1', '2017-03-31 19:18:46', '8', '8', '1', '3', '1', '1');
INSERT INTO `article` VALUES ('20', '啊发发发发司法所', '阿萨法司法所干发嘎嘎噶啊啊是否阿萨法司法所干发嘎嘎噶啊啊是否阿萨法司法所干发嘎嘎噶啊啊是否阿萨法司法所干发嘎嘎噶啊啊是否阿萨法司法所干发嘎嘎噶啊啊是否', '1', '2017-04-01 14:49:55', '1', '1', '0', '2', '0', '0');
INSERT INTO `article` VALUES ('22', '啊发发发发司法所', '<pre><span style=\"color:red;\">啊发发发发司法所啊发发发发司法所啊发发发发司法所啊发发发发司法所啊发发发发司法所啊发发发发司法所啊发发发发司法所啊发发发发司法所啊发发发发司法所啊发发发发司法所啊发发发发司法所</span></pre>', '1', '2017-04-01 14:51:56', '1', '36', '0', '2', '0', '0');
INSERT INTO `article` VALUES ('23', '笔记管理笔记管理笔记管理笔记管理笔记管理', '笔记管理笔记管理笔记管理笔记管理笔记管理笔记管理笔记管理笔记管理笔记管理笔记管理笔记管理笔记管理笔记管理笔记管理笔记管理笔记管理笔记管理笔记管理笔记管理笔记管理笔记管理笔记管理笔记管理笔记管理笔记管理笔记管理笔记管理笔记管理', '1', '2017-04-05 17:21:13', '2', '0', '0', '2', '0', '0');
INSERT INTO `article` VALUES ('24', 'Vue 2.0 Hello World', 'Vue 2.0 Hello WorldVue 2.0 Hello WorldVue 2.0 Hello WorldVue 2.0 Hello WorldVue 2.0 Hello WorldVue 2.0 Hello WorldVue 2.0 Hello WorldVue 2.0 Hello WorldVue 2.0 Hello WorldVue 2.0 Hello WorldVue 2.0 Hello WorldVue 2.0 Hello World', '1', '2017-04-05 17:21:33', '2', '0', '0', '2', '0', '0');
INSERT INTO `article` VALUES ('25', '笔记管理笔记管理笔记管理笔记管理笔记管理', '<br>笔记管理笔记管理笔记管理笔记管理笔记管理<br><br>笔记管理笔记管理笔记管理笔记管理笔记管理<br><br>笔记管理笔记管理笔记管理笔记管理笔记管理<br><br>笔记管理笔记管理笔记管理笔记管理笔记管理<br><br>笔记管理笔记管理笔记管理笔记管理笔记管理<br>', '1', '2017-04-05 17:22:25', '3', '0', '0', '2', '0', '0');

-- ----------------------------
-- Table structure for `classification`
-- ----------------------------
DROP TABLE IF EXISTS `classification`;
CREATE TABLE `classification` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `name` varchar(20) NOT NULL DEFAULT '' COMMENT '类别名称',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of classification
-- ----------------------------
INSERT INTO `classification` VALUES ('1', 'HTML/CSS');
INSERT INTO `classification` VALUES ('2', 'JavaScript');
INSERT INTO `classification` VALUES ('3', 'Node.js');
INSERT INTO `classification` VALUES ('4', '手机移动');
INSERT INTO `classification` VALUES ('5', '前端安全');
INSERT INTO `classification` VALUES ('6', '性能优化');
INSERT INTO `classification` VALUES ('7', '类库框架');
INSERT INTO `classification` VALUES ('8', '开发调试');
INSERT INTO `classification` VALUES ('9', '浏览器');
INSERT INTO `classification` VALUES ('10', '面试经验');

-- ----------------------------
-- Table structure for `collection`
-- ----------------------------
DROP TABLE IF EXISTS `collection`;
CREATE TABLE `collection` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `articleid` int(11) NOT NULL COMMENT '文章id',
  `userid` int(11) NOT NULL COMMENT '用户id',
  `addtime` datetime NOT NULL COMMENT '添加时间',
  PRIMARY KEY (`id`),
  KEY `col_articleid` (`articleid`),
  KEY `col_userid` (`userid`),
  CONSTRAINT `col_articleid` FOREIGN KEY (`articleid`) REFERENCES `article` (`id`),
  CONSTRAINT `col_userid` FOREIGN KEY (`userid`) REFERENCES `user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of collection
-- ----------------------------
INSERT INTO `collection` VALUES ('6', '5', '8', '2017-03-21 16:31:03');
INSERT INTO `collection` VALUES ('7', '5', '1', '2017-03-21 16:47:44');
INSERT INTO `collection` VALUES ('8', '19', '1', '2017-03-31 19:20:07');

-- ----------------------------
-- Table structure for `comment`
-- ----------------------------
DROP TABLE IF EXISTS `comment`;
CREATE TABLE `comment` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `userid` int(11) NOT NULL DEFAULT '0' COMMENT '评论人id',
  `articleid` int(11) NOT NULL DEFAULT '0' COMMENT '评论文章id',
  `content` varchar(2000) NOT NULL COMMENT '评论内容',
  `addtime` datetime NOT NULL COMMENT '评论时间',
  `replyid` int(11) NOT NULL COMMENT '回复评论的id',
  `replys` int(8) NOT NULL DEFAULT '0' COMMENT '回复数',
  `supports` int(8) NOT NULL DEFAULT '0' COMMENT '支持数',
  PRIMARY KEY (`id`),
  KEY `com_userid` (`userid`),
  KEY `com_articleid` (`articleid`),
  CONSTRAINT `com_articleid` FOREIGN KEY (`articleid`) REFERENCES `article` (`id`),
  CONSTRAINT `com_userid` FOREIGN KEY (`userid`) REFERENCES `user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=31 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of comment
-- ----------------------------
INSERT INTO `comment` VALUES ('1', '1', '5', '第一次评论', '2017-03-14 09:33:49', '0', '0', '0');
INSERT INTO `comment` VALUES ('2', '1', '5', '第二次评论', '2017-03-14 09:58:37', '0', '14', '3');
INSERT INTO `comment` VALUES ('3', '1', '5', '回复评论', '2017-03-15 14:34:36', '2', '0', '0');
INSERT INTO `comment` VALUES ('4', '1', '5', '第四次评论', '2017-03-15 14:40:20', '0', '0', '0');
INSERT INTO `comment` VALUES ('5', '1', '5', '第五次评论', '2017-03-15 14:40:58', '0', '0', '0');
INSERT INTO `comment` VALUES ('6', '1', '5', '第六次评论', '2017-03-15 14:41:32', '0', '0', '0');
INSERT INTO `comment` VALUES ('7', '1', '5', '第七次评论', '2017-03-15 14:45:37', '0', '0', '0');
INSERT INTO `comment` VALUES ('8', '1', '5', '第八次评论', '2017-03-15 14:45:46', '0', '0', '0');
INSERT INTO `comment` VALUES ('9', '1', '5', '第9次评论', '2017-03-15 14:45:52', '0', '0', '0');
INSERT INTO `comment` VALUES ('10', '1', '5', '第10次评论', '2017-03-15 14:45:56', '0', '0', '0');
INSERT INTO `comment` VALUES ('11', '1', '5', '第11次评论', '2017-03-15 14:45:59', '0', '0', '0');
INSERT INTO `comment` VALUES ('12', '1', '5', '第12次评论', '2017-03-15 15:37:51', '0', '0', '0');
INSERT INTO `comment` VALUES ('13', '1', '5', '第二次评论 的 第2次评论', '2017-03-15 15:38:37', '2', '0', '0');
INSERT INTO `comment` VALUES ('14', '1', '5', '第二次评论 的 第3次评论', '2017-03-15 15:39:52', '2', '0', '0');
INSERT INTO `comment` VALUES ('15', '1', '5', '第二次评论 的 第3次评论', '2017-03-15 15:40:53', '2', '0', '0');
INSERT INTO `comment` VALUES ('16', '1', '5', '第二次评论 的 第3次评论', '2017-03-15 15:40:55', '2', '0', '0');
INSERT INTO `comment` VALUES ('17', '1', '5', '第二次评论 的 第6次评论', '2017-03-15 15:42:45', '2', '0', '0');
INSERT INTO `comment` VALUES ('18', '1', '5', '第二次评论 的 第7次评论', '2017-03-15 15:43:28', '2', '0', '0');
INSERT INTO `comment` VALUES ('19', '1', '5', '第二次评论 的 第8次评论\n', '2017-03-15 15:44:44', '2', '0', '0');
INSERT INTO `comment` VALUES ('20', '1', '5', '第二次评论 的 第8次评论\n', '2017-03-15 15:44:47', '2', '0', '0');
INSERT INTO `comment` VALUES ('21', '1', '5', '第二次评论 的 第10次评论', '2017-03-15 15:45:23', '2', '0', '0');
INSERT INTO `comment` VALUES ('22', '1', '5', '第二次评论 的 第11次评论', '2017-03-15 15:54:38', '2', '0', '0');
INSERT INTO `comment` VALUES ('23', '1', '5', '第二次评论 的 第12次评论', '2017-03-15 15:57:27', '2', '0', '0');
INSERT INTO `comment` VALUES ('24', '1', '5', '第二次评论 的 第13次评论', '2017-03-15 15:58:24', '2', '1', '4');
INSERT INTO `comment` VALUES ('25', '1', '5', '第二次评论 的 第13次评论 的 第1次评论', '2017-03-15 16:03:50', '24', '0', '1');
INSERT INTO `comment` VALUES ('26', '1', '5', '啊啊啊', '2017-03-31 19:21:30', '2', '0', '0');
INSERT INTO `comment` VALUES ('27', '1', '5', '去去去', '2017-03-31 19:32:35', '0', '0', '0');
INSERT INTO `comment` VALUES ('28', '1', '5', '去去去', '2017-03-31 19:32:37', '0', '0', '0');
INSERT INTO `comment` VALUES ('29', '1', '5', '1', '2017-03-31 19:33:18', '0', '0', '0');
INSERT INTO `comment` VALUES ('30', '1', '19', '第一次评论', '2017-03-31 19:33:43', '0', '0', '0');

-- ----------------------------
-- Table structure for `like`
-- ----------------------------
DROP TABLE IF EXISTS `like`;
CREATE TABLE `like` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `articleid` int(11) NOT NULL COMMENT '笔记id',
  `userid` int(11) NOT NULL COMMENT '用户id',
  `addtime` datetime NOT NULL COMMENT '添加时间',
  PRIMARY KEY (`id`),
  KEY `like_articleid` (`articleid`),
  KEY `like_userid` (`userid`),
  CONSTRAINT `like_articleid` FOREIGN KEY (`articleid`) REFERENCES `article` (`id`),
  CONSTRAINT `like_userid` FOREIGN KEY (`userid`) REFERENCES `user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of like
-- ----------------------------
INSERT INTO `like` VALUES ('1', '5', '1', '2017-03-21 16:47:49');
INSERT INTO `like` VALUES ('2', '5', '2', '2017-03-21 16:48:55');
INSERT INTO `like` VALUES ('3', '5', '8', '2017-03-21 16:49:31');
INSERT INTO `like` VALUES ('4', '5', '7', '2017-03-22 10:07:47');
INSERT INTO `like` VALUES ('5', '5', '6', '2017-03-22 10:08:23');
INSERT INTO `like` VALUES ('6', '4', '6', '2017-03-22 10:10:03');
INSERT INTO `like` VALUES ('7', '19', '1', '2017-03-31 19:20:10');

-- ----------------------------
-- Table structure for `test`
-- ----------------------------
DROP TABLE IF EXISTS `test`;
CREATE TABLE `test` (
  `id` int(11) NOT NULL,
  `name` varchar(8) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of test
-- ----------------------------
INSERT INTO `test` VALUES ('1', 'test');

-- ----------------------------
-- Table structure for `type`
-- ----------------------------
DROP TABLE IF EXISTS `type`;
CREATE TABLE `type` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `name` varchar(20) NOT NULL COMMENT '类型名',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of type
-- ----------------------------
INSERT INTO `type` VALUES ('1', '随笔');
INSERT INTO `type` VALUES ('2', '译文');
INSERT INTO `type` VALUES ('3', '教程');

-- ----------------------------
-- Table structure for `user`
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `username` varchar(16) NOT NULL DEFAULT '' COMMENT '用户名',
  `password` varchar(16) NOT NULL DEFAULT '' COMMENT '密码',
  `experience` int(11) NOT NULL DEFAULT '0' COMMENT '经验',
  `level` int(4) NOT NULL DEFAULT '1' COMMENT '等级',
  `addtime` datetime NOT NULL COMMENT '添加时间',
  `headimg` varchar(200) NOT NULL COMMENT '头像图片',
  `introduction` varchar(200) NOT NULL DEFAULT '',
  `email` varchar(20) NOT NULL DEFAULT '',
  `emailstatus` bit(1) NOT NULL DEFAULT b'0' COMMENT '是否邮箱验证',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of user
-- ----------------------------
INSERT INTO `user` VALUES ('1', 'mj921', 'asdf1234', '0', '1', '2017-03-06 00:00:00', '/images/uploads/headimgs/default.jpg', '与自己为敌，与自己为友，一边深挖思想，一边埋葬自己。与自己为敌，与自己为友，一边深挖思想，一边埋葬自己。', '', '');
INSERT INTO `user` VALUES ('2', 'mjmj921', 'asdf1234', '0', '1', '2017-03-06 17:37:30', '/images/uploads/headimgs/default.jpg', '', '', '');
INSERT INTO `user` VALUES ('3', 'mjmjmj921', 'asdf1234', '0', '1', '2017-03-06 17:38:36', '/images/uploads/headimgs/default.jpg', '', '', '');
INSERT INTO `user` VALUES ('4', 'mj921921', 'asdf1234', '0', '1', '2017-03-16 18:31:19', '/images/uploads/headimgs/default.jpg', '', '', '');
INSERT INTO `user` VALUES ('5', 'mj921mj921', 'asdf1234', '0', '1', '2017-03-16 18:32:33', '/images/uploads/headimgs/default.jpg', '', '', '');
INSERT INTO `user` VALUES ('6', 'mmjj', 'asdf1234', '0', '1', '2017-03-17 10:05:30', '/images/uploads/headimgs/default.jpg', '', '', '');
INSERT INTO `user` VALUES ('7', 'mj789', 'asdf1234', '0', '0', '2017-03-17 18:57:30', '/images/uploads/headimgs/default.jpg', '', '', '');
INSERT INTO `user` VALUES ('8', 'mjmjmjmj', 'asdf1234', '0', '0', '2017-03-17 19:00:23', '/images/uploads/headimgs/default.jpg', '', '', '');
